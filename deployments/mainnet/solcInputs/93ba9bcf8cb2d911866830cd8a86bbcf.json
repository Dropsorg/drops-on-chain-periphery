{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "contracts/interfaces/balancer/IBalancerPool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBalancerPool {\n    function totalSupply() external view returns (uint256);\n\n    function getPoolId() external view returns (bytes32);\n\n    function getVault() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/balancer/IBalancerV2Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBalancerV2Vault {\n    function getPoolTokens(\n        bytes32 poolId\n    )\n        external\n        view\n        returns (address[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\n}\n"
    },
    "contracts/interfaces/drops/IChainlinkPriceFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IChainlinkPriceFactory {\n    function getUSDPrice(address asset) external view returns (int256);\n\n    function getETHPrice(address asset) external view returns (int256);\n}\n"
    },
    "contracts/interfaces/drops/IDropsOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol';\n\ninterface IDropsOracle {\n    function latestAnswer() external view returns (int256);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/lib/BalancerLib.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary BalancerLib {\n    uint256 public constant BONE = 10 ** 18;\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\n    uint256 public constant BPOW_PRECISION = BONE / 10 ** 10;\n\n    function btoi(uint256 a) internal pure returns (uint256) {\n        return a / BONE;\n    }\n\n    function bfloor(uint256 a) internal pure returns (uint256) {\n        return btoi(a) * BONE;\n    }\n\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, 'ERR_ADD_OVERFLOW');\n        return c;\n    }\n\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (uint256 c, bool flag) = bsubSign(a, b);\n        require(!flag, 'ERR_SUB_UNDERFLOW');\n        return c;\n    }\n\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\n        if (a >= b) {\n            return (a - b, false);\n        } else {\n            return (b - a, true);\n        }\n    }\n\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c0 = a * b;\n        require(a == 0 || c0 / a == b, 'ERR_MUL_OVERFLOW');\n        uint256 c1 = c0 + (BONE / 2);\n        require(c1 >= c0, 'ERR_MUL_OVERFLOW');\n        uint256 c2 = c1 / BONE;\n        return c2;\n    }\n\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, 'ERR_DIV_ZERO');\n        uint256 c0 = a * BONE;\n        require(a == 0 || c0 / a == BONE, 'ERR_DIV_INTERNAL'); // bmul overflow\n        uint256 c1 = c0 + (b / 2);\n        require(c1 >= c0, 'ERR_DIV_INTERNAL'); //  badd require\n        uint256 c2 = c1 / b;\n        return c2;\n    }\n\n    // DSMath.wpow\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\n        uint256 z = n % 2 != 0 ? a : BONE;\n\n        for (n /= 2; n != 0; n /= 2) {\n            a = bmul(a, a);\n\n            if (n % 2 != 0) {\n                z = bmul(z, a);\n            }\n        }\n        return z;\n    }\n\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\n    // of approximation of b^0.w\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\n        require(base >= MIN_BPOW_BASE, 'ERR_BPOW_BASE_TOO_LOW');\n        require(base <= MAX_BPOW_BASE, 'ERR_BPOW_BASE_TOO_HIGH');\n\n        uint256 whole = bfloor(exp);\n        uint256 remain = bsub(exp, whole);\n\n        uint256 wholePow = bpowi(base, btoi(whole));\n\n        if (remain == 0) {\n            return wholePow;\n        }\n\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n        return bmul(wholePow, partialResult);\n    }\n\n    function bpowApprox(\n        uint256 base,\n        uint256 exp,\n        uint256 precision\n    ) internal pure returns (uint256) {\n        // term 0:\n        uint256 a = exp;\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\n        uint256 term = BONE;\n        uint256 sum = term;\n        bool negative = false;\n\n        // term(k) = numer / denom\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\n        // continue until term is less than precision\n        for (uint256 i = 1; term >= precision; i++) {\n            uint256 bigK = i * BONE;\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n            term = bmul(term, bmul(c, x));\n            term = bdiv(term, bigK);\n            if (term == 0) break;\n\n            if (xneg) negative = !negative;\n            if (cneg) negative = !negative;\n            if (negative) {\n                sum = bsub(sum, term);\n            } else {\n                sum = badd(sum, term);\n            }\n        }\n\n        return sum;\n    }\n}\n"
    },
    "contracts/oracle/priceAggregators/WstETHWETHBalancerLPOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '../../interfaces/balancer/IBalancerPool.sol';\nimport '../../interfaces/balancer/IBalancerV2Vault.sol';\nimport '../../interfaces/drops/IChainlinkPriceFactory.sol';\nimport '../../interfaces/drops/IDropsOracle.sol';\nimport '../../lib/BalancerLib.sol';\n\ninterface IWrappedstETH {\n    function stETH() external view returns (address);\n\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\n}\n\n/**\n * @title LP token price oracle for BalancerStablePool of wstETH-WETH\n */\ncontract WstETHWETHBalancerLPOracle is IDropsOracle {\n    /// @notice address to stETH\n    address public constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n\n    /// @notice address to wstETH\n    address public constant wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n\n    /// @notice address to WETH\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /// @notice address to balancerVault\n    address public constant vault = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\n\n    /// @notice address to balancerVault\n    bytes32 public constant poolId =\n        0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080;\n\n    /// @notice address to balancer Pool\n    address public constant pool = 0x32296969Ef14EB0c6d29669C550D4a0449130230;\n\n    /// @notice address to the price factory\n    address public constant factory = 0xB08742E82cC6743D8a1Cf2473aD36c9Ea9D477fD;\n\n    /* ========== VIEWS ========== */\n\n    function decimals() external pure override returns (uint8) {\n        return 18;\n    }\n\n    function latestAnswer() external view override returns (int256 answer) {\n        uint256[] memory ethTotals = _getETHBalances();\n        answer = int256(_getArithmeticMean(ethTotals));\n    }\n\n    /* ========== INTERNAL ========== */\n\n    function _getETHBalances() internal view returns (uint256[] memory ethBalances) {\n        uint256 WETH_Price = 1e18;\n\n        uint256 stETHPrice = uint256(IChainlinkPriceFactory(factory).getETHPrice(stETH));\n        uint256 wstETH_Price = (stETHPrice * IWrappedstETH(wstETH).getStETHByWstETH(1e18)) / 1e18;\n\n        ethBalances = new uint256[](2);\n        (, uint256[] memory balances, ) = IBalancerV2Vault(vault).getPoolTokens(poolId);\n        ethBalances[0] = (wstETH_Price * balances[0]) / (10 ** 18);\n        ethBalances[1] = (WETH_Price * balances[1]) / (10 ** 18);\n    }\n\n    function _getArithmeticMean(uint256[] memory ethTotals) internal view returns (uint256) {\n        uint256 totalUsd = 0;\n        for (uint256 i = 0; i < 2; i++) {\n            totalUsd = totalUsd + ethTotals[i];\n        }\n        return BalancerLib.bdiv(totalUsd, IBalancerPool(pool).totalSupply());\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}