{
  "address": "0x13b3379380D791A6Df1edF74edB11C40a1300Ae8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogEmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "dropsYearnMarket",
      "outputs": [
        {
          "internalType": "contract IDropsYearnMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IYearnVault",
          "name": "_yVault",
          "type": "address"
        },
        {
          "internalType": "contract IDropsYearnMarket",
          "name": "_dropsYearnMarket",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayInYVTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IYearnVault",
          "name": "_yVault",
          "type": "address"
        },
        {
          "internalType": "contract IDropsYearnMarket",
          "name": "_dropsYearnMarket",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supplyInYVTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yVault",
      "outputs": [
        {
          "internalType": "contract IYearnVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x753c4d30db40452c0e5425d270c2d169fbca09d6267a3002abf17dab3b3d72af",
  "receipt": {
    "to": null,
    "from": "0x0450bf433FaD8820e180942B19f2B09Fe6c0854e",
    "contractAddress": "0x13b3379380D791A6Df1edF74edB11C40a1300Ae8",
    "transactionIndex": 114,
    "gasUsed": "2786890",
    "logsBloom": "0x
    "blockHash": "0x48c8cd74b965660102852cf48dfaf0b76ff1647a79ddbc0d40e5c51524f843ea",
    "transactionHash": "0x753c4d30db40452c0e5425d270c2d169fbca09d6267a3002abf17dab3b3d72af",
    "logs": [],
    "blockNumber": 17535999,
    "cumulativeGasUsed": "11167034",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2a79c4162b5952a6aa195452c697c39b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"dropsYearnMarket\",\"outputs\":[{\"internalType\":\"contract IDropsYearnMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IYearnVault\",\"name\":\"_yVault\",\"type\":\"address\"},{\"internalType\":\"contract IDropsYearnMarket\",\"name\":\"_dropsYearnMarket\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayInYVTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IYearnVault\",\"name\":\"_yVault\",\"type\":\"address\"},{\"internalType\":\"contract IDropsYearnMarket\",\"name\":\"_dropsYearnMarket\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supplyInYVTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yVault\",\"outputs\":[{\"internalType\":\"contract IYearnVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repayInYVTokens(uint256)\":{\"details\":\"callter should approve this contract before calling.      deposit tokens into yearn yVault and receives yvTokens (yVault shares)      repay in yvTokens\"},\"supplyInYVTokens(uint256)\":{\"details\":\"callter should approve this contract before calling.      deposit tokens into yearn yVault and receives yvTokens (yVault shares)      supply yvTokens into market and enable them as collateral\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"LogEmergencyWithdraw(address,address,uint256)\":{\"notice\":\"emitted when withdraw happens\"}},\"kind\":\"user\",\"methods\":{\"dropsYearnMarket()\":{\"notice\":\"token to deposit into yearn yVault\"},\"redeem(address,uint256)\":{\"notice\":\"market will call this function to withdraw tokens from yearn yVault (yvToken)\"},\"repayInYVTokens(uint256)\":{\"notice\":\"repay in yvTokens\"},\"supplyInYVTokens(uint256)\":{\"notice\":\"supply yvTokens into market\"},\"token()\":{\"notice\":\"token to deposit into yearn yVault\"},\"yVault()\":{\"notice\":\"yearn Vault\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/d6-market-migrations/YVTokenMigration.sol\":\"YVTokenMigration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x4dae161227d332808312ee2caf6384929321b83c16cc89b5642985fbec6b814c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/d6-market-migrations/YVTokenMigration.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nimport '../interfaces/drops/IDropsYearnMarket.sol';\\nimport '../interfaces/yearn/IYearnVault.sol';\\n\\ncontract YVTokenMigration is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice yearn Vault\\n    IYearnVault public yVault;\\n\\n    /// @notice token to deposit into yearn yVault\\n    IERC20Upgradeable public token;\\n\\n    /// @notice token to deposit into yearn yVault\\n    IDropsYearnMarket public dropsYearnMarket;\\n\\n    /// @notice emitted when withdraw happens\\n    event LogEmergencyWithdraw(address indexed from, address indexed token, uint256 amount);\\n\\n    function initialize(\\n        IYearnVault _yVault,\\n        IDropsYearnMarket _dropsYearnMarket\\n    ) public payable initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        _setAddresses(_yVault, _dropsYearnMarket);\\n    }\\n\\n    /* ========== internal functions ========== */\\n\\n    function _setAddresses(IYearnVault _yVault, IDropsYearnMarket _dropsYearnMarket) internal {\\n        yVault = _yVault;\\n        dropsYearnMarket = _dropsYearnMarket;\\n        token = IERC20Upgradeable(yVault.token());\\n    }\\n\\n    function _depositIntoYearn(\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint256 yvTokesAmount) {\\n        // withdraw tokens from user\\n        require(token.allowance(user, address(this)) >= amount, '!allowance');\\n        token.safeTransferFrom(user, address(this), amount);\\n\\n        // deposit tokens into yVault\\n        token.safeApprove(address(yVault), amount);\\n        yvTokesAmount = yVault.deposit(amount, address(this));\\n        require(yVault.balanceOf(address(this)) >= yvTokesAmount, '!deposit');\\n    }\\n\\n    /* ========== external functions ========== */\\n\\n    /// @notice supply yvTokens into market\\n    /// @dev callter should approve this contract before calling.\\n    ///      deposit tokens into yearn yVault and receives yvTokens (yVault shares)\\n    ///      supply yvTokens into market and enable them as collateral\\n    function supplyInYVTokens(uint256 amount) external whenNotPaused nonReentrant {\\n        address user = msg.sender;\\n        uint256 yvTokesAmount = _depositIntoYearn(user, amount);\\n\\n        // deposit yVault tokens into market for user\\n        IERC20Upgradeable(address(yVault)).safeApprove(address(dropsYearnMarket), yvTokesAmount);\\n        uint256 err = dropsYearnMarket.mintTo(yvTokesAmount, user);\\n        require(err != 0, '!mint');\\n\\n        // enable as collateral\\n        IDropsYearnComptroller comptroller = dropsYearnMarket.comptroller();\\n        address[] memory markets = new address[](1);\\n        markets[0] = address(dropsYearnMarket);\\n        comptroller.enterMarketsFrom(markets, user);\\n    }\\n\\n    /// @notice repay in yvTokens\\n    /// @dev callter should approve this contract before calling.\\n    ///      deposit tokens into yearn yVault and receives yvTokens (yVault shares)\\n    ///      repay in yvTokens\\n    function repayInYVTokens(uint256 amount) external whenNotPaused nonReentrant {\\n        uint256 yvTokesAmount = _depositIntoYearn(msg.sender, amount);\\n\\n        IERC20Upgradeable(address(yVault)).safeApprove(address(dropsYearnMarket), yvTokesAmount);\\n        uint256 err = dropsYearnMarket.repayBorrowBehalf(msg.sender, yvTokesAmount);\\n        require(err != 0, '!repayBorrowBehalf');\\n    }\\n\\n    /// @notice market will call this function to withdraw tokens from yearn yVault (yvToken)\\n    function redeem(\\n        address receiver,\\n        uint256 amount\\n    ) external whenNotPaused nonReentrant returns (uint256 assets) {\\n        require(msg.sender == address(dropsYearnMarket), '!market');\\n        require(\\n            IERC20Upgradeable(address(yVault)).balanceOf(address(this)) >= amount,\\n            '!vaultAmount'\\n        );\\n\\n        assets = yVault.withdraw(amount, receiver);\\n        require(assets > 0, '!assets');\\n    }\\n\\n    /* ========== owner level functions ========== */\\n\\n    function pause() external whenNotPaused onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external whenPaused onlyOwner {\\n        _unpause();\\n    }\\n\\n    function emergencyWithdraw(address asset, address receiver) external onlyOwner {\\n        uint256 assetBalance;\\n        if (asset == address(0)) {\\n            // ether\\n            assetBalance = (address(this)).balance;\\n            payable(receiver).transfer(assetBalance);\\n        } else {\\n            assetBalance = IERC20Upgradeable(asset).balanceOf(address(this));\\n            IERC20Upgradeable(asset).safeTransfer(receiver, assetBalance);\\n        }\\n        if (assetBalance > 0) {\\n            emit LogEmergencyWithdraw(receiver, asset, assetBalance);\\n        }\\n    }\\n\\n    function setAddresses(\\n        IYearnVault _yVault,\\n        IDropsYearnMarket _dropsYearnMarket\\n    ) external onlyOwner {\\n        require(\\n            address(_yVault) != address(0) && address(_dropsYearnMarket) != address(0),\\n            '!address'\\n        );\\n\\n        yVault = _yVault;\\n        dropsYearnMarket = _dropsYearnMarket;\\n        token = IERC20Upgradeable(yVault.token());\\n    }\\n}\\n\",\"keccak256\":\"0x0f2eb8772e754f87d4eab9e659db86c4e6817b10dd7d779bd639298d5c02ad8a\",\"license\":\"MIT\"},\"contracts/interfaces/drops/IDropsYearnMarket.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDropsYearnComptroller {\\n    function enterMarketsFrom(address[] memory cTokens, address from) external returns (uint256);\\n}\\n\\ninterface IDropsYearnMarket {\\n    function mintTo(uint256 mintAmount, address to) external returns (uint256);\\n\\n    function comptroller() external view returns (IDropsYearnComptroller);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xa1e86676ae2731525178a97ea2f1b0c22451136630b1568c2d8c221f241cda9f\",\"license\":\"MIT\"},\"contracts/interfaces/yearn/IYearnVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IYearnVault {\\n    function token() external view returns (address);\\n\\n    function deposit(uint256 amount, address recipient) external returns (uint256);\\n\\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x746ea3e993668b1ada070700bcb1b6e555e237beb0bdbcdc2a42cf07d842f6ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506131b1806100206000396000f3fe6080604052600436106100e85760003560e01c80638456cb591161008a578063ac4fef6311610059578063ac4fef6314610287578063ce1ce93a146102b2578063f2fde38b146102db578063fc0c546a14610304576100e8565b80638456cb59146101f35780638da5cb5b1461020a57806390107afe14610235578063ab2a2aea1461025e576100e8565b8063485cc955116100c6578063485cc9551461016c5780635c975abb146101885780636382d9ad146101b3578063715018a6146101dc576100e8565b80631e9a6950146100ed57806333303f8e1461012a5780633f4ba83a14610155575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190612205565b61032f565b6040516101219190612b06565b60405180910390f35b34801561013657600080fd5b5061013f6105bf565b60405161014c919061284e565b60405180910390f35b34801561016157600080fd5b5061016a6105e5565b005b61018660048036038101906101819190612293565b6105ff565b005b34801561019457600080fd5b5061019d610759565b6040516101aa91906127fd565b60405180910390f35b3480156101bf57600080fd5b506101da60048036038101906101d591906121c9565b610770565b005b3480156101e857600080fd5b506101f161093f565b005b3480156101ff57600080fd5b50610208610953565b005b34801561021657600080fd5b5061021f61096d565b60405161022c9190612729565b60405180910390f35b34801561024157600080fd5b5061025c60048036038101906102579190612293565b610997565b005b34801561026a57600080fd5b50610285600480360381019061028091906122cf565b610bae565b005b34801561029357600080fd5b5061029c610f84565b6040516102a99190612818565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d491906122cf565b610faa565b005b3480156102e757600080fd5b5061030260048036038101906102fd9190612177565b61113b565b005b34801561031057600080fd5b506103196111bf565b6040516103269190612833565b60405180910390f35b60006103396111e5565b61034161122f565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c8906129e6565b60405180910390fd5b8160c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161042d9190612729565b60206040518083038186803b15801561044557600080fd5b505afa158015610459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047d91906122f8565b10156104be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b590612986565b60405180910390fd5b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662f714ce83856040518363ffffffff1660e01b815260040161051a929190612b21565b602060405180830381600087803b15801561053457600080fd5b505af1158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906122f8565b9050600081116105b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a890612a06565b60405180910390fd5b6105b961127f565b92915050565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105ed611288565b6105f56112d1565b6105fd61134f565b565b60008060019054906101000a900460ff161590508080156106305750600160008054906101000a900460ff1660ff16105b8061065d575061063f306113b2565b15801561065c5750600160008054906101000a900460ff1660ff16145b5b61069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069390612946565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156106d9576001600060016101000a81548160ff0219169083151502179055505b6106e16113d5565b6106e961142e565b6106f1611487565b6106fb83836114e0565b80156107545760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161074b9190612869565b60405180910390a15b505050565b6000609760009054906101000a900460ff16905090565b6107786112d1565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610814573073ffffffffffffffffffffffffffffffffffffffff163190508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561080e573d6000803e3d6000fd5b506108cb565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161084d9190612729565b60206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d91906122f8565b90506108ca82828573ffffffffffffffffffffffffffffffffffffffff166116469092919063ffffffff16565b5b600081111561093a578273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f46250b0a744e514bfdb95561a293ae5220bba28e3ef598ba6772e909fefd7cc7836040516109319190612b06565b60405180910390a35b505050565b6109476112d1565b61095160006116cc565b565b61095b6111e5565b6109636112d1565b61096b611792565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61099f6112d1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610a095750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90612a46565b60405180910390fd5b8160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3257600080fd5b505afa158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a91906121a0565b60ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610bb66111e5565b610bbe61122f565b60003390506000610bcf82846117f5565b9050610c4060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b489092919063ffffffff16565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b723b34e83856040518363ffffffff1660e01b8152600401610c9f929190612b21565b602060405180830381600087803b158015610cb957600080fd5b505af1158015610ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf191906122f8565b90506000811415610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e90612a86565b60405180910390fd5b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610da157600080fd5b505afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd9919061226a565b90506000600167ffffffffffffffff811115610e1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e4c5781602001602082028036833780820191505090505b50905060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610eac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166333e4212982876040518363ffffffff1660e01b8152600401610f219291906127cd565b602060405180830381600087803b158015610f3b57600080fd5b505af1158015610f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7391906122f8565b505050505050610f8161127f565b50565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610fb26111e5565b610fba61122f565b6000610fc633836117f5565b905061103760cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b489092919063ffffffff16565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632608f81833846040518363ffffffff1660e01b81526004016110969291906127a4565b602060405180830381600087803b1580156110b057600080fd5b505af11580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e891906122f8565b9050600081141561112e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112590612906565b60405180910390fd5b505061113861127f565b50565b6111436112d1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111aa906128c6565b60405180910390fd5b6111bc816116cc565b50565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111ed610759565b1561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122490612926565b60405180910390fd5b565b60026001541415611275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126c90612ac6565b60405180910390fd5b6002600181905550565b60018081905550565b611290610759565b6112cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c6906128a6565b60405180910390fd5b565b6112d9611ca6565b73ffffffffffffffffffffffffffffffffffffffff166112f761096d565b73ffffffffffffffffffffffffffffffffffffffff161461134d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611344906129a6565b60405180910390fd5b565b611357611288565b6000609760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61139b611ca6565b6040516113a89190612729565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141b90612a66565b60405180910390fd5b61142c611cae565b565b600060019054906101000a900460ff1661147d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147490612a66565b60405180910390fd5b611485611d0f565b565b600060019054906101000a900460ff166114d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cd90612a66565b60405180910390fd5b6114de611d67565b565b8160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ca57600080fd5b505afa1580156115de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160291906121a0565b60ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6116c78363a9059cbb60e01b84846040516024016116659291906127a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611dd3565b505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61179a6111e5565b6001609760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117de611ca6565b6040516117eb9190612729565b60405180910390a1565b60008160ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e85306040518363ffffffff1660e01b8152600401611855929190612744565b60206040518083038186803b15801561186d57600080fd5b505afa158015611881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a591906122f8565b10156118e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118dd906129c6565b60405180910390fd5b61193583308460ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611e9b909392919063ffffffff16565b6119a460c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b489092919063ffffffff16565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e553f6583306040518363ffffffff1660e01b8152600401611a01929190612b21565b602060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5391906122f8565b90508060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ab19190612729565b60206040518083038186803b158015611ac957600080fd5b505afa158015611add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0191906122f8565b1015611b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3990612966565b60405180910390fd5b92915050565b6000811480611be1575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611b8f929190612744565b60206040518083038186803b158015611ba757600080fd5b505afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf91906122f8565b145b611c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1790612ae6565b60405180910390fd5b611ca18363095ea7b360e01b8484604051602401611c3f9291906127a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611dd3565b505050565b600033905090565b600060019054906101000a900460ff16611cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf490612a66565b60405180910390fd5b611d0d611d08611ca6565b6116cc565b565b600060019054906101000a900460ff16611d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5590612a66565b60405180910390fd5b60018081905550565b600060019054906101000a900460ff16611db6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dad90612a66565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b6000611e35826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611f249092919063ffffffff16565b9050600081511480611e57575080806020019051810190611e569190612241565b5b611e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8d90612aa6565b60405180910390fd5b505050565b611f1e846323b872dd60e01b858585604051602401611ebc9392919061276d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611dd3565b50505050565b6060611f338484600085611f3c565b90509392505050565b606082471015611f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f78906128e6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611faa9190612712565b60006040518083038185875af1925050503d8060008114611fe7576040519150601f19603f3d011682016040523d82523d6000602084013e611fec565b606091505b5091509150611ffd87838387612009565b92505050949350505050565b6060831561206c5760008351141561206457612024856113b2565b612063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205a90612a26565b60405180910390fd5b5b829050612077565b612076838361207f565b5b949350505050565b6000825111156120925781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c69190612884565b60405180910390fd5b6000813590506120de816130f1565b92915050565b6000815190506120f3816130f1565b92915050565b60008151905061210881613108565b92915050565b60008151905061211d8161311f565b92915050565b60008135905061213281613136565b92915050565b6000813590506121478161314d565b92915050565b60008135905061215c81613164565b92915050565b60008151905061217181613164565b92915050565b60006020828403121561218957600080fd5b6000612197848285016120cf565b91505092915050565b6000602082840312156121b257600080fd5b60006121c0848285016120e4565b91505092915050565b600080604083850312156121dc57600080fd5b60006121ea858286016120cf565b92505060206121fb858286016120cf565b9150509250929050565b6000806040838503121561221857600080fd5b6000612226858286016120cf565b92505060206122378582860161214d565b9150509250929050565b60006020828403121561225357600080fd5b6000612261848285016120f9565b91505092915050565b60006020828403121561227c57600080fd5b600061228a8482850161210e565b91505092915050565b600080604083850312156122a657600080fd5b60006122b485828601612138565b92505060206122c585828601612123565b9150509250929050565b6000602082840312156122e157600080fd5b60006122ef8482850161214d565b91505092915050565b60006020828403121561230a57600080fd5b600061231884828501612162565b91505092915050565b600061232d8383612339565b60208301905092915050565b61234281612bb5565b82525050565b61235181612bb5565b82525050565b600061236282612b5a565b61236c8185612b88565b935061237783612b4a565b8060005b838110156123a857815161238f8882612321565b975061239a83612b7b565b92505060018101905061237b565b5085935050505092915050565b6123be81612bc7565b82525050565b60006123cf82612b65565b6123d98185612b99565b93506123e9818560208601612cbe565b80840191505092915050565b6123fe81612c40565b82525050565b61240d81612c64565b82525050565b61241c81612c88565b82525050565b61242b81612cac565b82525050565b600061243c82612b70565b6124468185612ba4565b9350612456818560208601612cbe565b61245f81612cf1565b840191505092915050565b6000612477601483612ba4565b915061248282612d02565b602082019050919050565b600061249a602683612ba4565b91506124a582612d2b565b604082019050919050565b60006124bd602683612ba4565b91506124c882612d7a565b604082019050919050565b60006124e0601283612ba4565b91506124eb82612dc9565b602082019050919050565b6000612503601083612ba4565b915061250e82612df2565b602082019050919050565b6000612526602e83612ba4565b915061253182612e1b565b604082019050919050565b6000612549600883612ba4565b915061255482612e6a565b602082019050919050565b600061256c600c83612ba4565b915061257782612e93565b602082019050919050565b600061258f602083612ba4565b915061259a82612ebc565b602082019050919050565b60006125b2600a83612ba4565b91506125bd82612ee5565b602082019050919050565b60006125d5600783612ba4565b91506125e082612f0e565b602082019050919050565b60006125f8600783612ba4565b915061260382612f37565b602082019050919050565b600061261b601d83612ba4565b915061262682612f60565b602082019050919050565b600061263e600883612ba4565b915061264982612f89565b602082019050919050565b6000612661602b83612ba4565b915061266c82612fb2565b604082019050919050565b6000612684600583612ba4565b915061268f82613001565b602082019050919050565b60006126a7602a83612ba4565b91506126b28261302a565b604082019050919050565b60006126ca601f83612ba4565b91506126d582613079565b602082019050919050565b60006126ed603683612ba4565b91506126f8826130a2565b604082019050919050565b61270c81612c29565b82525050565b600061271e82846123c4565b915081905092915050565b600060208201905061273e6000830184612348565b92915050565b60006040820190506127596000830185612348565b6127666020830184612348565b9392505050565b60006060820190506127826000830186612348565b61278f6020830185612348565b61279c6040830184612703565b949350505050565b60006040820190506127b96000830185612348565b6127c66020830184612703565b9392505050565b600060408201905081810360008301526127e78185612357565b90506127f66020830184612348565b9392505050565b600060208201905061281260008301846123b5565b92915050565b600060208201905061282d60008301846123f5565b92915050565b60006020820190506128486000830184612404565b92915050565b60006020820190506128636000830184612413565b92915050565b600060208201905061287e6000830184612422565b92915050565b6000602082019050818103600083015261289e8184612431565b905092915050565b600060208201905081810360008301526128bf8161246a565b9050919050565b600060208201905081810360008301526128df8161248d565b9050919050565b600060208201905081810360008301526128ff816124b0565b9050919050565b6000602082019050818103600083015261291f816124d3565b9050919050565b6000602082019050818103600083015261293f816124f6565b9050919050565b6000602082019050818103600083015261295f81612519565b9050919050565b6000602082019050818103600083015261297f8161253c565b9050919050565b6000602082019050818103600083015261299f8161255f565b9050919050565b600060208201905081810360008301526129bf81612582565b9050919050565b600060208201905081810360008301526129df816125a5565b9050919050565b600060208201905081810360008301526129ff816125c8565b9050919050565b60006020820190508181036000830152612a1f816125eb565b9050919050565b60006020820190508181036000830152612a3f8161260e565b9050919050565b60006020820190508181036000830152612a5f81612631565b9050919050565b60006020820190508181036000830152612a7f81612654565b9050919050565b60006020820190508181036000830152612a9f81612677565b9050919050565b60006020820190508181036000830152612abf8161269a565b9050919050565b60006020820190508181036000830152612adf816126bd565b9050919050565b60006020820190508181036000830152612aff816126e0565b9050919050565b6000602082019050612b1b6000830184612703565b92915050565b6000604082019050612b366000830185612703565b612b436020830184612348565b9392505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612bc082612c09565b9050919050565b60008115159050919050565b6000612bde82612bb5565b9050919050565b6000612bf082612bb5565b9050919050565b6000612c0282612bb5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612c4b82612c52565b9050919050565b6000612c5d82612c09565b9050919050565b6000612c6f82612c76565b9050919050565b6000612c8182612c09565b9050919050565b6000612c9382612c9a565b9050919050565b6000612ca582612c09565b9050919050565b6000612cb782612c33565b9050919050565b60005b83811015612cdc578082015181840152602081019050612cc1565b83811115612ceb576000848401525b50505050565b6000601f19601f8301169050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f217265706179426f72726f77426568616c660000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f216465706f736974000000000000000000000000000000000000000000000000600082015250565b7f217661756c74416d6f756e740000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f21616c6c6f77616e636500000000000000000000000000000000000000000000600082015250565b7f216d61726b657400000000000000000000000000000000000000000000000000600082015250565b7f2161737365747300000000000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2161646472657373000000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f216d696e74000000000000000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6130fa81612bb5565b811461310557600080fd5b50565b61311181612bc7565b811461311c57600080fd5b50565b61312881612bd3565b811461313357600080fd5b50565b61313f81612be5565b811461314a57600080fd5b50565b61315681612bf7565b811461316157600080fd5b50565b61316d81612c29565b811461317857600080fd5b5056fea26469706673582212209b0aceac8804d6b73675c0bb20265f9e20f66834b049162c1e7a00ca651dc65e64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80638456cb591161008a578063ac4fef6311610059578063ac4fef6314610287578063ce1ce93a146102b2578063f2fde38b146102db578063fc0c546a14610304576100e8565b80638456cb59146101f35780638da5cb5b1461020a57806390107afe14610235578063ab2a2aea1461025e576100e8565b8063485cc955116100c6578063485cc9551461016c5780635c975abb146101885780636382d9ad146101b3578063715018a6146101dc576100e8565b80631e9a6950146100ed57806333303f8e1461012a5780633f4ba83a14610155575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190612205565b61032f565b6040516101219190612b06565b60405180910390f35b34801561013657600080fd5b5061013f6105bf565b60405161014c919061284e565b60405180910390f35b34801561016157600080fd5b5061016a6105e5565b005b61018660048036038101906101819190612293565b6105ff565b005b34801561019457600080fd5b5061019d610759565b6040516101aa91906127fd565b60405180910390f35b3480156101bf57600080fd5b506101da60048036038101906101d591906121c9565b610770565b005b3480156101e857600080fd5b506101f161093f565b005b3480156101ff57600080fd5b50610208610953565b005b34801561021657600080fd5b5061021f61096d565b60405161022c9190612729565b60405180910390f35b34801561024157600080fd5b5061025c60048036038101906102579190612293565b610997565b005b34801561026a57600080fd5b50610285600480360381019061028091906122cf565b610bae565b005b34801561029357600080fd5b5061029c610f84565b6040516102a99190612818565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d491906122cf565b610faa565b005b3480156102e757600080fd5b5061030260048036038101906102fd9190612177565b61113b565b005b34801561031057600080fd5b506103196111bf565b6040516103269190612833565b60405180910390f35b60006103396111e5565b61034161122f565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c8906129e6565b60405180910390fd5b8160c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161042d9190612729565b60206040518083038186803b15801561044557600080fd5b505afa158015610459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047d91906122f8565b10156104be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b590612986565b60405180910390fd5b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662f714ce83856040518363ffffffff1660e01b815260040161051a929190612b21565b602060405180830381600087803b15801561053457600080fd5b505af1158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906122f8565b9050600081116105b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a890612a06565b60405180910390fd5b6105b961127f565b92915050565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105ed611288565b6105f56112d1565b6105fd61134f565b565b60008060019054906101000a900460ff161590508080156106305750600160008054906101000a900460ff1660ff16105b8061065d575061063f306113b2565b15801561065c5750600160008054906101000a900460ff1660ff16145b5b61069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069390612946565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156106d9576001600060016101000a81548160ff0219169083151502179055505b6106e16113d5565b6106e961142e565b6106f1611487565b6106fb83836114e0565b80156107545760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161074b9190612869565b60405180910390a15b505050565b6000609760009054906101000a900460ff16905090565b6107786112d1565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610814573073ffffffffffffffffffffffffffffffffffffffff163190508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561080e573d6000803e3d6000fd5b506108cb565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161084d9190612729565b60206040518083038186803b15801561086557600080fd5b505afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d91906122f8565b90506108ca82828573ffffffffffffffffffffffffffffffffffffffff166116469092919063ffffffff16565b5b600081111561093a578273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f46250b0a744e514bfdb95561a293ae5220bba28e3ef598ba6772e909fefd7cc7836040516109319190612b06565b60405180910390a35b505050565b6109476112d1565b61095160006116cc565b565b61095b6111e5565b6109636112d1565b61096b611792565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61099f6112d1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610a095750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90612a46565b60405180910390fd5b8160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3257600080fd5b505afa158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a91906121a0565b60ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610bb66111e5565b610bbe61122f565b60003390506000610bcf82846117f5565b9050610c4060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b489092919063ffffffff16565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b723b34e83856040518363ffffffff1660e01b8152600401610c9f929190612b21565b602060405180830381600087803b158015610cb957600080fd5b505af1158015610ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf191906122f8565b90506000811415610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e90612a86565b60405180910390fd5b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610da157600080fd5b505afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd9919061226a565b90506000600167ffffffffffffffff811115610e1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e4c5781602001602082028036833780820191505090505b50905060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110610eac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166333e4212982876040518363ffffffff1660e01b8152600401610f219291906127cd565b602060405180830381600087803b158015610f3b57600080fd5b505af1158015610f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7391906122f8565b505050505050610f8161127f565b50565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610fb26111e5565b610fba61122f565b6000610fc633836117f5565b905061103760cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b489092919063ffffffff16565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632608f81833846040518363ffffffff1660e01b81526004016110969291906127a4565b602060405180830381600087803b1580156110b057600080fd5b505af11580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e891906122f8565b9050600081141561112e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112590612906565b60405180910390fd5b505061113861127f565b50565b6111436112d1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111aa906128c6565b60405180910390fd5b6111bc816116cc565b50565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111ed610759565b1561122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122490612926565b60405180910390fd5b565b60026001541415611275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126c90612ac6565b60405180910390fd5b6002600181905550565b60018081905550565b611290610759565b6112cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c6906128a6565b60405180910390fd5b565b6112d9611ca6565b73ffffffffffffffffffffffffffffffffffffffff166112f761096d565b73ffffffffffffffffffffffffffffffffffffffff161461134d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611344906129a6565b60405180910390fd5b565b611357611288565b6000609760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61139b611ca6565b6040516113a89190612729565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141b90612a66565b60405180910390fd5b61142c611cae565b565b600060019054906101000a900460ff1661147d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147490612a66565b60405180910390fd5b611485611d0f565b565b600060019054906101000a900460ff166114d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cd90612a66565b60405180910390fd5b6114de611d67565b565b8160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ca57600080fd5b505afa1580156115de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160291906121a0565b60ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6116c78363a9059cbb60e01b84846040516024016116659291906127a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611dd3565b505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61179a6111e5565b6001609760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117de611ca6565b6040516117eb9190612729565b60405180910390a1565b60008160ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e85306040518363ffffffff1660e01b8152600401611855929190612744565b60206040518083038186803b15801561186d57600080fd5b505afa158015611881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a591906122f8565b10156118e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118dd906129c6565b60405180910390fd5b61193583308460ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611e9b909392919063ffffffff16565b6119a460c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b489092919063ffffffff16565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e553f6583306040518363ffffffff1660e01b8152600401611a01929190612b21565b602060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5391906122f8565b90508060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ab19190612729565b60206040518083038186803b158015611ac957600080fd5b505afa158015611add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0191906122f8565b1015611b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3990612966565b60405180910390fd5b92915050565b6000811480611be1575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611b8f929190612744565b60206040518083038186803b158015611ba757600080fd5b505afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf91906122f8565b145b611c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1790612ae6565b60405180910390fd5b611ca18363095ea7b360e01b8484604051602401611c3f9291906127a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611dd3565b505050565b600033905090565b600060019054906101000a900460ff16611cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf490612a66565b60405180910390fd5b611d0d611d08611ca6565b6116cc565b565b600060019054906101000a900460ff16611d5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5590612a66565b60405180910390fd5b60018081905550565b600060019054906101000a900460ff16611db6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dad90612a66565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b6000611e35826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611f249092919063ffffffff16565b9050600081511480611e57575080806020019051810190611e569190612241565b5b611e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8d90612aa6565b60405180910390fd5b505050565b611f1e846323b872dd60e01b858585604051602401611ebc9392919061276d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611dd3565b50505050565b6060611f338484600085611f3c565b90509392505050565b606082471015611f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f78906128e6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611faa9190612712565b60006040518083038185875af1925050503d8060008114611fe7576040519150601f19603f3d011682016040523d82523d6000602084013e611fec565b606091505b5091509150611ffd87838387612009565b92505050949350505050565b6060831561206c5760008351141561206457612024856113b2565b612063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205a90612a26565b60405180910390fd5b5b829050612077565b612076838361207f565b5b949350505050565b6000825111156120925781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c69190612884565b60405180910390fd5b6000813590506120de816130f1565b92915050565b6000815190506120f3816130f1565b92915050565b60008151905061210881613108565b92915050565b60008151905061211d8161311f565b92915050565b60008135905061213281613136565b92915050565b6000813590506121478161314d565b92915050565b60008135905061215c81613164565b92915050565b60008151905061217181613164565b92915050565b60006020828403121561218957600080fd5b6000612197848285016120cf565b91505092915050565b6000602082840312156121b257600080fd5b60006121c0848285016120e4565b91505092915050565b600080604083850312156121dc57600080fd5b60006121ea858286016120cf565b92505060206121fb858286016120cf565b9150509250929050565b6000806040838503121561221857600080fd5b6000612226858286016120cf565b92505060206122378582860161214d565b9150509250929050565b60006020828403121561225357600080fd5b6000612261848285016120f9565b91505092915050565b60006020828403121561227c57600080fd5b600061228a8482850161210e565b91505092915050565b600080604083850312156122a657600080fd5b60006122b485828601612138565b92505060206122c585828601612123565b9150509250929050565b6000602082840312156122e157600080fd5b60006122ef8482850161214d565b91505092915050565b60006020828403121561230a57600080fd5b600061231884828501612162565b91505092915050565b600061232d8383612339565b60208301905092915050565b61234281612bb5565b82525050565b61235181612bb5565b82525050565b600061236282612b5a565b61236c8185612b88565b935061237783612b4a565b8060005b838110156123a857815161238f8882612321565b975061239a83612b7b565b92505060018101905061237b565b5085935050505092915050565b6123be81612bc7565b82525050565b60006123cf82612b65565b6123d98185612b99565b93506123e9818560208601612cbe565b80840191505092915050565b6123fe81612c40565b82525050565b61240d81612c64565b82525050565b61241c81612c88565b82525050565b61242b81612cac565b82525050565b600061243c82612b70565b6124468185612ba4565b9350612456818560208601612cbe565b61245f81612cf1565b840191505092915050565b6000612477601483612ba4565b915061248282612d02565b602082019050919050565b600061249a602683612ba4565b91506124a582612d2b565b604082019050919050565b60006124bd602683612ba4565b91506124c882612d7a565b604082019050919050565b60006124e0601283612ba4565b91506124eb82612dc9565b602082019050919050565b6000612503601083612ba4565b915061250e82612df2565b602082019050919050565b6000612526602e83612ba4565b915061253182612e1b565b604082019050919050565b6000612549600883612ba4565b915061255482612e6a565b602082019050919050565b600061256c600c83612ba4565b915061257782612e93565b602082019050919050565b600061258f602083612ba4565b915061259a82612ebc565b602082019050919050565b60006125b2600a83612ba4565b91506125bd82612ee5565b602082019050919050565b60006125d5600783612ba4565b91506125e082612f0e565b602082019050919050565b60006125f8600783612ba4565b915061260382612f37565b602082019050919050565b600061261b601d83612ba4565b915061262682612f60565b602082019050919050565b600061263e600883612ba4565b915061264982612f89565b602082019050919050565b6000612661602b83612ba4565b915061266c82612fb2565b604082019050919050565b6000612684600583612ba4565b915061268f82613001565b602082019050919050565b60006126a7602a83612ba4565b91506126b28261302a565b604082019050919050565b60006126ca601f83612ba4565b91506126d582613079565b602082019050919050565b60006126ed603683612ba4565b91506126f8826130a2565b604082019050919050565b61270c81612c29565b82525050565b600061271e82846123c4565b915081905092915050565b600060208201905061273e6000830184612348565b92915050565b60006040820190506127596000830185612348565b6127666020830184612348565b9392505050565b60006060820190506127826000830186612348565b61278f6020830185612348565b61279c6040830184612703565b949350505050565b60006040820190506127b96000830185612348565b6127c66020830184612703565b9392505050565b600060408201905081810360008301526127e78185612357565b90506127f66020830184612348565b9392505050565b600060208201905061281260008301846123b5565b92915050565b600060208201905061282d60008301846123f5565b92915050565b60006020820190506128486000830184612404565b92915050565b60006020820190506128636000830184612413565b92915050565b600060208201905061287e6000830184612422565b92915050565b6000602082019050818103600083015261289e8184612431565b905092915050565b600060208201905081810360008301526128bf8161246a565b9050919050565b600060208201905081810360008301526128df8161248d565b9050919050565b600060208201905081810360008301526128ff816124b0565b9050919050565b6000602082019050818103600083015261291f816124d3565b9050919050565b6000602082019050818103600083015261293f816124f6565b9050919050565b6000602082019050818103600083015261295f81612519565b9050919050565b6000602082019050818103600083015261297f8161253c565b9050919050565b6000602082019050818103600083015261299f8161255f565b9050919050565b600060208201905081810360008301526129bf81612582565b9050919050565b600060208201905081810360008301526129df816125a5565b9050919050565b600060208201905081810360008301526129ff816125c8565b9050919050565b60006020820190508181036000830152612a1f816125eb565b9050919050565b60006020820190508181036000830152612a3f8161260e565b9050919050565b60006020820190508181036000830152612a5f81612631565b9050919050565b60006020820190508181036000830152612a7f81612654565b9050919050565b60006020820190508181036000830152612a9f81612677565b9050919050565b60006020820190508181036000830152612abf8161269a565b9050919050565b60006020820190508181036000830152612adf816126bd565b9050919050565b60006020820190508181036000830152612aff816126e0565b9050919050565b6000602082019050612b1b6000830184612703565b92915050565b6000604082019050612b366000830185612703565b612b436020830184612348565b9392505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612bc082612c09565b9050919050565b60008115159050919050565b6000612bde82612bb5565b9050919050565b6000612bf082612bb5565b9050919050565b6000612c0282612bb5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612c4b82612c52565b9050919050565b6000612c5d82612c09565b9050919050565b6000612c6f82612c76565b9050919050565b6000612c8182612c09565b9050919050565b6000612c9382612c9a565b9050919050565b6000612ca582612c09565b9050919050565b6000612cb782612c33565b9050919050565b60005b83811015612cdc578082015181840152602081019050612cc1565b83811115612ceb576000848401525b50505050565b6000601f19601f8301169050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f217265706179426f72726f77426568616c660000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f216465706f736974000000000000000000000000000000000000000000000000600082015250565b7f217661756c74416d6f756e740000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f21616c6c6f77616e636500000000000000000000000000000000000000000000600082015250565b7f216d61726b657400000000000000000000000000000000000000000000000000600082015250565b7f2161737365747300000000000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2161646472657373000000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f216d696e74000000000000000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6130fa81612bb5565b811461310557600080fd5b50565b61311181612bc7565b811461311c57600080fd5b50565b61312881612bd3565b811461313357600080fd5b50565b61313f81612be5565b811461314a57600080fd5b50565b61315681612bf7565b811461316157600080fd5b50565b61316d81612c29565b811461317857600080fd5b5056fea26469706673582212209b0aceac8804d6b73675c0bb20265f9e20f66834b049162c1e7a00ca651dc65e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repayInYVTokens(uint256)": {
        "details": "callter should approve this contract before calling.      deposit tokens into yearn yVault and receives yvTokens (yVault shares)      repay in yvTokens"
      },
      "supplyInYVTokens(uint256)": {
        "details": "callter should approve this contract before calling.      deposit tokens into yearn yVault and receives yvTokens (yVault shares)      supply yvTokens into market and enable them as collateral"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogEmergencyWithdraw(address,address,uint256)": {
        "notice": "emitted when withdraw happens"
      }
    },
    "kind": "user",
    "methods": {
      "dropsYearnMarket()": {
        "notice": "token to deposit into yearn yVault"
      },
      "redeem(address,uint256)": {
        "notice": "market will call this function to withdraw tokens from yearn yVault (yvToken)"
      },
      "repayInYVTokens(uint256)": {
        "notice": "repay in yvTokens"
      },
      "supplyInYVTokens(uint256)": {
        "notice": "supply yvTokens into market"
      },
      "token()": {
        "notice": "token to deposit into yearn yVault"
      },
      "yVault()": {
        "notice": "yearn Vault"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 232,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 235,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 535,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 604,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1466,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 104,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 224,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 520,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3822,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "yVault",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IYearnVault)4571"
      },
      {
        "astId": 3826,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "token",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IERC20Upgradeable)683"
      },
      {
        "astId": 3830,
        "contract": "contracts/d6-market-migrations/YVTokenMigration.sol:YVTokenMigration",
        "label": "dropsYearnMarket",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IDropsYearnMarket)4501"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDropsYearnMarket)4501": {
        "encoding": "inplace",
        "label": "contract IDropsYearnMarket",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)683": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IYearnVault)4571": {
        "encoding": "inplace",
        "label": "contract IYearnVault",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}