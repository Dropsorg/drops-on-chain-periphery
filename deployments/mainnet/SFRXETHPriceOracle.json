{
  "address": "0xef6e9D77409861363e5eD8c6Abcf943e77134491",
  "abi": [
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "descriton",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sfrxETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc47bad01b454d586c46817d71d73676c4da7364549ec9f9e4e357e36fb87314",
  "receipt": {
    "to": null,
    "from": "0x84C613147C6c681Ba13f3022A0cF6770d44EbA29",
    "contractAddress": "0xef6e9D77409861363e5eD8c6Abcf943e77134491",
    "transactionIndex": 92,
    "gasUsed": "349556",
    "logsBloom": "0x
    "blockHash": "0x63d5d0613ecadb914e5aa4b6ce18dda75bfe9e885990e8367ef2daf331f1c35f",
    "transactionHash": "0xcc47bad01b454d586c46817d71d73676c4da7364549ec9f9e4e357e36fb87314",
    "logs": [],
    "blockNumber": 17688983,
    "cumulativeGasUsed": "10658395",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cba0662159ce2364ff38c42bb4e812a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriton\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sfrxETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"aggregator contract that provides eth price of Staked Frax Ether\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"sfrxETH()\":{\"notice\":\"address to frxETH\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/priceAggregators/SFRXETHPriceOracle.sol\":\"SFRXETHPriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/drops/IChainlinkPriceFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IChainlinkPriceFactory {\\n    function getUSDPrice(address asset) external view returns (int256);\\n\\n    function getETHPrice(address asset) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5fee90072a5ed99bc0392731a52f4def4daeaef61bb63199288a18414e64253e\",\"license\":\"MIT\"},\"contracts/oracle/priceAggregators/SFRXETHPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '../../interfaces/drops/IChainlinkPriceFactory.sol';\\n\\ninterface ISFRXETH {\\n    function pricePerShare() external view returns (uint256);\\n}\\n\\n/**\\n * @title aggregator contract that provides eth price of Staked Frax Ether\\n */\\ncontract SFRXETHPriceOracle {\\n    /// @notice address to frxETH\\n    address public constant sfrxETH = 0xac3E018457B222d93114458476f3E3416Abbe38F;\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function descriton() external pure returns (string memory) {\\n        return 'Staked Frax Ether oracle';\\n    }\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 /*roundId*/,\\n            int256 answer,\\n            uint256 /*startedAt*/,\\n            uint256 /*updatedAt*/,\\n            uint80 /*answeredInRound*/\\n        )\\n    {\\n        answer = int256((1e18 * ISFRXETH(sfrxETH).pricePerShare()) / 1e18);\\n    }\\n}\\n\",\"keccak256\":\"0xd9e7437d89b04143496ce0e7075eb6586d3ad4adbde8659e1e5cc01f3b30e689\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610560806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806317dc2a7114610051578063313ce5671461006f578063c9ac8c8e1461008d578063feaf968c146100ab575b600080fd5b6100596100cd565b60405161006691906102d1565b60405180910390f35b61007761010a565b6040516100849190610346565b60405180910390f35b610095610113565b6040516100a291906102b6565b60405180910390f35b6100b361012b565b6040516100c49594939291906102f3565b60405180910390f35b60606040518060400160405280601881526020017f5374616b65642046726178204574686572206f7261636c650000000000000000815250905090565b60006012905090565b73ac3e018457b222d93114458476f3e3416abbe38f81565b6000806000806000670de0b6b3a764000073ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561019657600080fd5b505afa1580156101aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ce9190610209565b670de0b6b3a76400006101e191906103ae565b6101eb919061037d565b93509091929394565b60008151905061020381610513565b92915050565b60006020828403121561021b57600080fd5b6000610229848285016101f4565b91505092915050565b61023b81610408565b82525050565b61024a8161041a565b82525050565b600061025b82610361565b610265818561036c565b9350610275818560208601610471565b61027e81610502565b840191505092915050565b61029281610444565b82525050565b6102a18161045b565b82525050565b6102b08161044e565b82525050565b60006020820190506102cb6000830184610232565b92915050565b600060208201905081810360008301526102eb8184610250565b905092915050565b600060a0820190506103086000830188610298565b6103156020830187610241565b6103226040830186610289565b61032f6060830185610289565b61033c6080830184610298565b9695505050505050565b600060208201905061035b60008301846102a7565b92915050565b600081519050919050565b600082825260208201905092915050565b600061038882610444565b915061039383610444565b9250826103a3576103a26104d3565b5b828204905092915050565b60006103b982610444565b91506103c483610444565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156103fd576103fc6104a4565b5b828202905092915050565b600061041382610424565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b8381101561048f578082015181840152602081019050610474565b8381111561049e576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b61051c81610444565b811461052757600080fd5b5056fea26469706673582212202746072dac2e875165efd07ff1c1399214f48e55c4f93983efb572405bfdf32a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806317dc2a7114610051578063313ce5671461006f578063c9ac8c8e1461008d578063feaf968c146100ab575b600080fd5b6100596100cd565b60405161006691906102d1565b60405180910390f35b61007761010a565b6040516100849190610346565b60405180910390f35b610095610113565b6040516100a291906102b6565b60405180910390f35b6100b361012b565b6040516100c49594939291906102f3565b60405180910390f35b60606040518060400160405280601881526020017f5374616b65642046726178204574686572206f7261636c650000000000000000815250905090565b60006012905090565b73ac3e018457b222d93114458476f3e3416abbe38f81565b6000806000806000670de0b6b3a764000073ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561019657600080fd5b505afa1580156101aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ce9190610209565b670de0b6b3a76400006101e191906103ae565b6101eb919061037d565b93509091929394565b60008151905061020381610513565b92915050565b60006020828403121561021b57600080fd5b6000610229848285016101f4565b91505092915050565b61023b81610408565b82525050565b61024a8161041a565b82525050565b600061025b82610361565b610265818561036c565b9350610275818560208601610471565b61027e81610502565b840191505092915050565b61029281610444565b82525050565b6102a18161045b565b82525050565b6102b08161044e565b82525050565b60006020820190506102cb6000830184610232565b92915050565b600060208201905081810360008301526102eb8184610250565b905092915050565b600060a0820190506103086000830188610298565b6103156020830187610241565b6103226040830186610289565b61032f6060830185610289565b61033c6080830184610298565b9695505050505050565b600060208201905061035b60008301846102a7565b92915050565b600081519050919050565b600082825260208201905092915050565b600061038882610444565b915061039383610444565b9250826103a3576103a26104d3565b5b828204905092915050565b60006103b982610444565b91506103c483610444565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156103fd576103fc6104a4565b5b828202905092915050565b600061041382610424565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b8381101561048f578082015181840152602081019050610474565b8381111561049e576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b61051c81610444565b811461052757600080fd5b5056fea26469706673582212202746072dac2e875165efd07ff1c1399214f48e55c4f93983efb572405bfdf32a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "aggregator contract that provides eth price of Staked Frax Ether",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "sfrxETH()": {
        "notice": "address to frxETH"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}