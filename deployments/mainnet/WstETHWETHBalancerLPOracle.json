{
  "address": "0x023F638f718758752548d407De4b2f93D5Bcb66B",
  "abi": [
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wstETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeccf19bf5f7d6416a062d251f87a8816ec15638502300f2b79df49d4f2132587",
  "receipt": {
    "to": null,
    "from": "0x0450bf433FaD8820e180942B19f2B09Fe6c0854e",
    "contractAddress": "0x023F638f718758752548d407De4b2f93D5Bcb66B",
    "transactionIndex": 167,
    "gasUsed": "947494",
    "logsBloom": "0x
    "blockHash": "0x037469e551620a842323baec06acfe826895516bde06eed9c02eda1b8c9bff15",
    "transactionHash": "0xeccf19bf5f7d6416a062d251f87a8816ec15638502300f2b79df49d4f2132587",
    "logs": [],
    "blockNumber": 17492563,
    "cumulativeGasUsed": "17268294",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "93ba9bcf8cb2d911866830cd8a86bbcf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"LP token price oracle for BalancerStablePool of wstETH-WETH\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"address to WETH\"},\"factory()\":{\"notice\":\"address to the price factory\"},\"pool()\":{\"notice\":\"address to balancer Pool\"},\"poolId()\":{\"notice\":\"address to balancerVault\"},\"stETH()\":{\"notice\":\"address to stETH\"},\"vault()\":{\"notice\":\"address to balancerVault\"},\"wstETH()\":{\"notice\":\"address to wstETH\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/priceAggregators/WstETHWETHBalancerLPOracle.sol\":\"WstETHWETHBalancerLPOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IBalancerPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBalancerPool {\\n    function totalSupply() external view returns (uint256);\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getVault() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3afeacc18364162ea1ee0c8adefffba38c1d6a4ae0408b777a67c52a56d2128f\",\"license\":\"MIT\"},\"contracts/interfaces/balancer/IBalancerV2Vault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBalancerV2Vault {\\n    function getPoolTokens(\\n        bytes32 poolId\\n    )\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n}\\n\",\"keccak256\":\"0xd0ddd6b06f96950cbad000f37956a6a2f8b473b4bba5d8fe7d4daf7199ce6a85\",\"license\":\"MIT\"},\"contracts/interfaces/drops/IChainlinkPriceFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IChainlinkPriceFactory {\\n    function getUSDPrice(address asset) external view returns (int256);\\n\\n    function getETHPrice(address asset) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x5fee90072a5ed99bc0392731a52f4def4daeaef61bb63199288a18414e64253e\",\"license\":\"MIT\"},\"contracts/interfaces/drops/IDropsOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol';\\n\\ninterface IDropsOracle {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x87e27a358f4eb0428b60bff5be5743ef7f794cba244c735f0e913cac26b66d0c\",\"license\":\"MIT\"},\"contracts/lib/BalancerLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary BalancerLib {\\n    uint256 public constant BONE = 10 ** 18;\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10 ** 10;\\n\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'ERR_ADD_OVERFLOW');\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, 'ERR_SUB_UNDERFLOW');\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, 'ERR_MUL_OVERFLOW');\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, 'ERR_MUL_OVERFLOW');\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'ERR_DIV_ZERO');\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, 'ERR_DIV_INTERNAL'); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, 'ERR_DIV_INTERNAL'); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, 'ERR_BPOW_BASE_TOO_LOW');\\n        require(base <= MAX_BPOW_BASE, 'ERR_BPOW_BASE_TOO_HIGH');\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0x861837b1f1832972fcdb7a95e4493b4d25523833dea5e9eafb7c30907f737f30\",\"license\":\"MIT\"},\"contracts/oracle/priceAggregators/WstETHWETHBalancerLPOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../interfaces/balancer/IBalancerPool.sol';\\nimport '../../interfaces/balancer/IBalancerV2Vault.sol';\\nimport '../../interfaces/drops/IChainlinkPriceFactory.sol';\\nimport '../../interfaces/drops/IDropsOracle.sol';\\nimport '../../lib/BalancerLib.sol';\\n\\ninterface IWrappedstETH {\\n    function stETH() external view returns (address);\\n\\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\\n}\\n\\n/**\\n * @title LP token price oracle for BalancerStablePool of wstETH-WETH\\n */\\ncontract WstETHWETHBalancerLPOracle is IDropsOracle {\\n    /// @notice address to stETH\\n    address public constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n\\n    /// @notice address to wstETH\\n    address public constant wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n\\n    /// @notice address to WETH\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    /// @notice address to balancerVault\\n    address public constant vault = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n\\n    /// @notice address to balancerVault\\n    bytes32 public constant poolId =\\n        0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080;\\n\\n    /// @notice address to balancer Pool\\n    address public constant pool = 0x32296969Ef14EB0c6d29669C550D4a0449130230;\\n\\n    /// @notice address to the price factory\\n    address public constant factory = 0xB08742E82cC6743D8a1Cf2473aD36c9Ea9D477fD;\\n\\n    /* ========== VIEWS ========== */\\n\\n    function decimals() external pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function latestAnswer() external view override returns (int256 answer) {\\n        uint256[] memory ethTotals = _getETHBalances();\\n        answer = int256(_getArithmeticMean(ethTotals));\\n    }\\n\\n    /* ========== INTERNAL ========== */\\n\\n    function _getETHBalances() internal view returns (uint256[] memory ethBalances) {\\n        uint256 WETH_Price = 1e18;\\n\\n        uint256 stETHPrice = uint256(IChainlinkPriceFactory(factory).getETHPrice(stETH));\\n        uint256 wstETH_Price = (stETHPrice * IWrappedstETH(wstETH).getStETHByWstETH(1e18)) / 1e18;\\n\\n        ethBalances = new uint256[](2);\\n        (, uint256[] memory balances, ) = IBalancerV2Vault(vault).getPoolTokens(poolId);\\n        ethBalances[0] = (wstETH_Price * balances[0]) / (10 ** 18);\\n        ethBalances[1] = (WETH_Price * balances[1]) / (10 ** 18);\\n    }\\n\\n    function _getArithmeticMean(uint256[] memory ethTotals) internal view returns (uint256) {\\n        uint256 totalUsd = 0;\\n        for (uint256 i = 0; i < 2; i++) {\\n            totalUsd = totalUsd + ethTotals[i];\\n        }\\n        return BalancerLib.bdiv(totalUsd, IBalancerPool(pool).totalSupply());\\n    }\\n}\\n\",\"keccak256\":\"0x1cdaa22b614aa906edf75e8bcfe59bff46a6611c23eb45b24ab278da74cf229c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611044806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806350d25bcd1161006657806350d25bcd14610110578063ad5c46481461012e578063c1fe3e481461014c578063c45a01551461016a578063fbfa77cf1461018857610093565b806316f0115b14610098578063313ce567146100b65780633e0dc34e146100d45780634aa07e64146100f2575b600080fd5b6100a06101a6565b6040516100ad9190610bba565b60405180910390f35b6100be6101be565b6040516100cb9190610c66565b60405180910390f35b6100dc6101c7565b6040516100e99190610bd5565b60405180910390f35b6100fa6101ee565b6040516101079190610bba565b60405180910390f35b610118610206565b6040516101259190610bf0565b60405180910390f35b610136610222565b6040516101439190610bba565b60405180910390f35b61015461023a565b6040516101619190610bba565b60405180910390f35b610172610252565b60405161017f9190610bba565b60405180910390f35b61019061026a565b60405161019d9190610bba565b60405180910390f35b7332296969ef14eb0c6d29669c550d4a044913023081565b60006012905090565b7f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008060001b81565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b600080610211610282565b905061021c8161069d565b91505090565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b73ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b73b08742e82cc6743d8a1cf2473ad36c9ea9d477fd81565b73ba12222222228d8ba445958a75a0704d566bf2c881565b60606000670de0b6b3a76400009050600073b08742e82cc6743d8a1cf2473ad36c9ea9d477fd73ffffffffffffffffffffffffffffffffffffffff166397cecb2573ae7ab96520de3a18e5e111b5eaab095312d7fe846040518263ffffffff1660e01b81526004016102f49190610bba565b60206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190610ad7565b90506000670de0b6b3a7640000737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff1663bb2952fc670de0b6b3a76400006040518263ffffffff1660e01b81526004016103a69190610c0b565b60206040518083038186803b1580156103be57600080fd5b505afa1580156103d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f69190610b00565b836104019190610d96565b61040b9190610d65565b9050600267ffffffffffffffff81111561044e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561047c5781602001602082028036833780820191505090505b509350600073ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff1663f94d46687f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008060001b6040518263ffffffff1660e01b81526004016104f19190610bd5565b60006040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105469190610a58565b50915050670de0b6b3a76400008160008151811061058d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151836105a09190610d96565b6105aa9190610d65565b856000815181106105e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050670de0b6b3a764000081600181518110610633577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151856106469190610d96565b6106509190610d65565b8560018151811061068a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505050505090565b6000806000905060005b6002811015610711578381815181106106e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826106fc9190610d0f565b9150808061070990610e90565b9150506106a7565b506107ad817332296969ef14eb0c6d29669c550d4a044913023073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561077057600080fd5b505afa158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a89190610b00565b6107b5565b915050919050565b6000808214156107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f190610c46565b60405180910390fd5b6000670de0b6b3a7640000846108109190610d96565b905060008414806108335750670de0b6b3a764000084826108319190610d65565b145b610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086990610c26565b60405180910390fd5b60006002846108819190610d65565b8261088c9190610d0f565b9050818110156108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c890610c26565b60405180910390fd5b600084826108df9190610d65565b905080935050505092915050565b60006109006108fb84610ca6565b610c81565b9050808382526020820190508285602086028201111561091f57600080fd5b60005b8581101561094f578161093588826109c5565b845260208401935060208301925050600181019050610922565b5050509392505050565b600061096c61096784610cd2565b610c81565b9050808382526020820190508285602086028201111561098b57600080fd5b60005b858110156109bb57816109a18882610a43565b84526020840193506020830192505060018101905061098e565b5050509392505050565b6000815190506109d481610fc9565b92915050565b600082601f8301126109eb57600080fd5b81516109fb8482602086016108ed565b91505092915050565b600082601f830112610a1557600080fd5b8151610a25848260208601610959565b91505092915050565b600081519050610a3d81610fe0565b92915050565b600081519050610a5281610ff7565b92915050565b600080600060608486031215610a6d57600080fd5b600084015167ffffffffffffffff811115610a8757600080fd5b610a93868287016109da565b935050602084015167ffffffffffffffff811115610ab057600080fd5b610abc86828701610a04565b9250506040610acd86828701610a43565b9150509250925092565b600060208284031215610ae957600080fd5b6000610af784828501610a2e565b91505092915050565b600060208284031215610b1257600080fd5b6000610b2084828501610a43565b91505092915050565b610b3281610df0565b82525050565b610b4181610e02565b82525050565b610b5081610e0c565b82525050565b610b5f81610e4d565b82525050565b6000610b72601083610cfe565b9150610b7d82610f77565b602082019050919050565b6000610b95600c83610cfe565b9150610ba082610fa0565b602082019050919050565b610bb481610e40565b82525050565b6000602082019050610bcf6000830184610b29565b92915050565b6000602082019050610bea6000830184610b38565b92915050565b6000602082019050610c056000830184610b47565b92915050565b6000602082019050610c206000830184610b56565b92915050565b60006020820190508181036000830152610c3f81610b65565b9050919050565b60006020820190508181036000830152610c5f81610b88565b9050919050565b6000602082019050610c7b6000830184610bab565b92915050565b6000610c8b610c9c565b9050610c978282610e5f565b919050565b6000604051905090565b600067ffffffffffffffff821115610cc157610cc0610f37565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610ced57610cec610f37565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000610d1a82610e36565b9150610d2583610e36565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5a57610d59610ed9565b5b828201905092915050565b6000610d7082610e36565b9150610d7b83610e36565b925082610d8b57610d8a610f08565b5b828204905092915050565b6000610da182610e36565b9150610dac83610e36565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610de557610de4610ed9565b5b828202905092915050565b6000610dfb82610e16565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610e5882610e36565b9050919050565b610e6882610f66565b810181811067ffffffffffffffff82111715610e8757610e86610f37565b5b80604052505050565b6000610e9b82610e36565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ece57610ecd610ed9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552525f4449565f494e5445524e414c00000000000000000000000000000000600082015250565b7f4552525f4449565f5a45524f0000000000000000000000000000000000000000600082015250565b610fd281610df0565b8114610fdd57600080fd5b50565b610fe981610e0c565b8114610ff457600080fd5b50565b61100081610e36565b811461100b57600080fd5b5056fea2646970667358221220310d743fe949e38f7a5cbbfd2bc5811cea65a005b30214401b8be9bc332f1cea64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806350d25bcd1161006657806350d25bcd14610110578063ad5c46481461012e578063c1fe3e481461014c578063c45a01551461016a578063fbfa77cf1461018857610093565b806316f0115b14610098578063313ce567146100b65780633e0dc34e146100d45780634aa07e64146100f2575b600080fd5b6100a06101a6565b6040516100ad9190610bba565b60405180910390f35b6100be6101be565b6040516100cb9190610c66565b60405180910390f35b6100dc6101c7565b6040516100e99190610bd5565b60405180910390f35b6100fa6101ee565b6040516101079190610bba565b60405180910390f35b610118610206565b6040516101259190610bf0565b60405180910390f35b610136610222565b6040516101439190610bba565b60405180910390f35b61015461023a565b6040516101619190610bba565b60405180910390f35b610172610252565b60405161017f9190610bba565b60405180910390f35b61019061026a565b60405161019d9190610bba565b60405180910390f35b7332296969ef14eb0c6d29669c550d4a044913023081565b60006012905090565b7f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008060001b81565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b600080610211610282565b905061021c8161069d565b91505090565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b73ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b73b08742e82cc6743d8a1cf2473ad36c9ea9d477fd81565b73ba12222222228d8ba445958a75a0704d566bf2c881565b60606000670de0b6b3a76400009050600073b08742e82cc6743d8a1cf2473ad36c9ea9d477fd73ffffffffffffffffffffffffffffffffffffffff166397cecb2573ae7ab96520de3a18e5e111b5eaab095312d7fe846040518263ffffffff1660e01b81526004016102f49190610bba565b60206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190610ad7565b90506000670de0b6b3a7640000737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff1663bb2952fc670de0b6b3a76400006040518263ffffffff1660e01b81526004016103a69190610c0b565b60206040518083038186803b1580156103be57600080fd5b505afa1580156103d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f69190610b00565b836104019190610d96565b61040b9190610d65565b9050600267ffffffffffffffff81111561044e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561047c5781602001602082028036833780820191505090505b509350600073ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff1663f94d46687f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008060001b6040518263ffffffff1660e01b81526004016104f19190610bd5565b60006040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105469190610a58565b50915050670de0b6b3a76400008160008151811061058d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151836105a09190610d96565b6105aa9190610d65565b856000815181106105e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050670de0b6b3a764000081600181518110610633577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151856106469190610d96565b6106509190610d65565b8560018151811061068a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505050505090565b6000806000905060005b6002811015610711578381815181106106e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826106fc9190610d0f565b9150808061070990610e90565b9150506106a7565b506107ad817332296969ef14eb0c6d29669c550d4a044913023073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561077057600080fd5b505afa158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a89190610b00565b6107b5565b915050919050565b6000808214156107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f190610c46565b60405180910390fd5b6000670de0b6b3a7640000846108109190610d96565b905060008414806108335750670de0b6b3a764000084826108319190610d65565b145b610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086990610c26565b60405180910390fd5b60006002846108819190610d65565b8261088c9190610d0f565b9050818110156108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c890610c26565b60405180910390fd5b600084826108df9190610d65565b905080935050505092915050565b60006109006108fb84610ca6565b610c81565b9050808382526020820190508285602086028201111561091f57600080fd5b60005b8581101561094f578161093588826109c5565b845260208401935060208301925050600181019050610922565b5050509392505050565b600061096c61096784610cd2565b610c81565b9050808382526020820190508285602086028201111561098b57600080fd5b60005b858110156109bb57816109a18882610a43565b84526020840193506020830192505060018101905061098e565b5050509392505050565b6000815190506109d481610fc9565b92915050565b600082601f8301126109eb57600080fd5b81516109fb8482602086016108ed565b91505092915050565b600082601f830112610a1557600080fd5b8151610a25848260208601610959565b91505092915050565b600081519050610a3d81610fe0565b92915050565b600081519050610a5281610ff7565b92915050565b600080600060608486031215610a6d57600080fd5b600084015167ffffffffffffffff811115610a8757600080fd5b610a93868287016109da565b935050602084015167ffffffffffffffff811115610ab057600080fd5b610abc86828701610a04565b9250506040610acd86828701610a43565b9150509250925092565b600060208284031215610ae957600080fd5b6000610af784828501610a2e565b91505092915050565b600060208284031215610b1257600080fd5b6000610b2084828501610a43565b91505092915050565b610b3281610df0565b82525050565b610b4181610e02565b82525050565b610b5081610e0c565b82525050565b610b5f81610e4d565b82525050565b6000610b72601083610cfe565b9150610b7d82610f77565b602082019050919050565b6000610b95600c83610cfe565b9150610ba082610fa0565b602082019050919050565b610bb481610e40565b82525050565b6000602082019050610bcf6000830184610b29565b92915050565b6000602082019050610bea6000830184610b38565b92915050565b6000602082019050610c056000830184610b47565b92915050565b6000602082019050610c206000830184610b56565b92915050565b60006020820190508181036000830152610c3f81610b65565b9050919050565b60006020820190508181036000830152610c5f81610b88565b9050919050565b6000602082019050610c7b6000830184610bab565b92915050565b6000610c8b610c9c565b9050610c978282610e5f565b919050565b6000604051905090565b600067ffffffffffffffff821115610cc157610cc0610f37565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610ced57610cec610f37565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000610d1a82610e36565b9150610d2583610e36565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5a57610d59610ed9565b5b828201905092915050565b6000610d7082610e36565b9150610d7b83610e36565b925082610d8b57610d8a610f08565b5b828204905092915050565b6000610da182610e36565b9150610dac83610e36565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610de557610de4610ed9565b5b828202905092915050565b6000610dfb82610e16565b9050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000610e5882610e36565b9050919050565b610e6882610f66565b810181811067ffffffffffffffff82111715610e8757610e86610f37565b5b80604052505050565b6000610e9b82610e36565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ece57610ecd610ed9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552525f4449565f494e5445524e414c00000000000000000000000000000000600082015250565b7f4552525f4449565f5a45524f0000000000000000000000000000000000000000600082015250565b610fd281610df0565b8114610fdd57600080fd5b50565b610fe981610e0c565b8114610ff457600080fd5b50565b61100081610e36565b811461100b57600080fd5b5056fea2646970667358221220310d743fe949e38f7a5cbbfd2bc5811cea65a005b30214401b8be9bc332f1cea64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "LP token price oracle for BalancerStablePool of wstETH-WETH",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "address to WETH"
      },
      "factory()": {
        "notice": "address to the price factory"
      },
      "pool()": {
        "notice": "address to balancer Pool"
      },
      "poolId()": {
        "notice": "address to balancerVault"
      },
      "stETH()": {
        "notice": "address to stETH"
      },
      "vault()": {
        "notice": "address to balancerVault"
      },
      "wstETH()": {
        "notice": "address to wstETH"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}