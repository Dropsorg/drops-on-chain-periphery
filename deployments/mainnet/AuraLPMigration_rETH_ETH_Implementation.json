{
  "address": "0xD4B3a578e87e5BC73bAb4e1BBAc7F6B253Bde777",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogEmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auraRewardPool",
      "outputs": [
        {
          "internalType": "contract IAuraBaseRewardPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerLP",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundingVault",
      "outputs": [
        {
          "internalType": "contract IDropsCompoundingVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dropsAuraMarket",
      "outputs": [
        {
          "internalType": "contract IDropsAuraMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuraBaseRewardPool",
          "name": "_auraRewardPool",
          "type": "address"
        },
        {
          "internalType": "contract IDropsCompoundingVault",
          "name": "_compoundingVault",
          "type": "address"
        },
        {
          "internalType": "contract IDropsAuraMarket",
          "name": "_dropsAuraMarket",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reciver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawType",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuraBaseRewardPool",
          "name": "_auraRewardPool",
          "type": "address"
        },
        {
          "internalType": "contract IDropsCompoundingVault",
          "name": "_compoundingVault",
          "type": "address"
        },
        {
          "internalType": "contract IDropsAuraMarket",
          "name": "_dropsAuraMarket",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supplyToMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12b216c638662b8125af3a9ab3f17cefd0de5360413e6564e5460f3317286353",
  "receipt": {
    "to": null,
    "from": "0x0450bf433FaD8820e180942B19f2B09Fe6c0854e",
    "contractAddress": "0xD4B3a578e87e5BC73bAb4e1BBAc7F6B253Bde777",
    "transactionIndex": 90,
    "gasUsed": "3125665",
    "logsBloom": "0x
    "blockHash": "0x6bf0dc671462dde5fcb3ca0481014d41364343ab855ab94b609750a14b8af2c8",
    "transactionHash": "0x12b216c638662b8125af3a9ab3f17cefd0de5360413e6564e5460f3317286353",
    "logs": [],
    "blockNumber": 17720961,
    "cumulativeGasUsed": "10790103",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b338d94ebb1cc1ac69c4d23c6d1b96a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auraRewardPool\",\"outputs\":[{\"internalType\":\"contract IAuraBaseRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerLP\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundingVault\",\"outputs\":[{\"internalType\":\"contract IDropsCompoundingVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropsAuraMarket\",\"outputs\":[{\"internalType\":\"contract IDropsAuraMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuraBaseRewardPool\",\"name\":\"_auraRewardPool\",\"type\":\"address\"},{\"internalType\":\"contract IDropsCompoundingVault\",\"name\":\"_compoundingVault\",\"type\":\"address\"},{\"internalType\":\"contract IDropsAuraMarket\",\"name\":\"_dropsAuraMarket\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawType\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuraBaseRewardPool\",\"name\":\"_auraRewardPool\",\"type\":\"address\"},{\"internalType\":\"contract IDropsCompoundingVault\",\"name\":\"_compoundingVault\",\"type\":\"address\"},{\"internalType\":\"contract IDropsAuraMarket\",\"name\":\"_dropsAuraMarket\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supplyToMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeem(address,uint256,uint256)\":{\"params\":{\"withdrawType\":\"1 for withdraw balancer LP, 2 for restake\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supplyToMarket(uint256)\":{\"details\":\"caller should approve this contract before calling.      also enables supplied assets as collateral in the market\",\"params\":{\"amount\":\"of Aura pool tokens to withdraw\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AuraLPMigration: get balanceLP from Aura and supply\",\"version\":1},\"userdoc\":{\"events\":{\"LogEmergencyWithdraw(address,address,uint256)\":{\"notice\":\"emitted when withdraw happens\"}},\"kind\":\"user\",\"methods\":{\"auraRewardPool()\":{\"notice\":\"aura base reward pool\"},\"balancerLP()\":{\"notice\":\"balancer LP token\"},\"compoundingVault()\":{\"notice\":\"auto compounding vault\"},\"dropsAuraMarket()\":{\"notice\":\"drops CToken for aura market\"},\"redeem(address,uint256,uint256)\":{\"notice\":\"market will call this function to withdraw balancer LP or restake to Aura the market should send vault erc20 tokens before call this function\"},\"supplyToMarket(uint256)\":{\"notice\":\"withdraw LP tokens from Aura and supply to market\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/d6-market-migrations/AuraLPMigration.sol\":\"AuraLPMigration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x4dae161227d332808312ee2caf6384929321b83c16cc89b5642985fbec6b814c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/d6-market-migrations/AuraLPMigration.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nimport '../interfaces/drops/IDropsCompoundingVault.sol';\\nimport '../interfaces/drops/IDropsAuraMarket.sol';\\nimport '../interfaces/aura/IAuraBaseRewardPool.sol';\\n\\n/** @title AuraLPMigration: get balanceLP from Aura and supply\\n */\\ncontract AuraLPMigration is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice aura base reward pool\\n    IAuraBaseRewardPool public auraRewardPool;\\n\\n    /// @notice auto compounding vault\\n    IDropsCompoundingVault public compoundingVault;\\n\\n    /// @notice drops CToken for aura market\\n    IDropsAuraMarket public dropsAuraMarket;\\n\\n    /// @notice balancer LP token\\n    IERC20Upgradeable public balancerLP;\\n\\n    /// @notice emitted when withdraw happens\\n    event LogEmergencyWithdraw(address indexed from, address indexed asset, uint256 amount);\\n\\n    function initialize(\\n        IAuraBaseRewardPool _auraRewardPool,\\n        IDropsCompoundingVault _compoundingVault,\\n        IDropsAuraMarket _dropsAuraMarket\\n    ) public payable initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        _setAddresses(_auraRewardPool, _compoundingVault, _dropsAuraMarket);\\n    }\\n\\n    function _setAddresses(\\n        IAuraBaseRewardPool _auraRewardPool,\\n        IDropsCompoundingVault _compoundingVault,\\n        IDropsAuraMarket _dropsAuraMarket\\n    ) internal {\\n        require(\\n            _auraRewardPool.asset() == address(_compoundingVault.want()),\\n            'aura asset are not same with compoundingVault want'\\n        );\\n\\n        compoundingVault = _compoundingVault;\\n        auraRewardPool = _auraRewardPool;\\n        dropsAuraMarket = _dropsAuraMarket;\\n        balancerLP = IERC20Upgradeable(_auraRewardPool.asset());\\n    }\\n\\n    /// @notice withdraw LP tokens from Aura and supply to market\\n    /// @dev caller should approve this contract before calling.\\n    ///      also enables supplied assets as collateral in the market\\n    /// @param amount of Aura pool tokens to withdraw\\n    function supplyToMarket(\\n        uint256 amount\\n    ) external whenNotPaused nonReentrant returns (uint256 shares) {\\n        require(amount > 0, '!amount');\\n\\n        address user = msg.sender;\\n        require(auraRewardPool.allowance(user, address(this)) >= amount, '!allowance');\\n\\n        // withdraw from Aura\\n        auraRewardPool.withdraw(amount, address(this), user);\\n        require(balancerLP.balanceOf(address(this)) >= amount, '!assets');\\n\\n        // deposit into compounding compoundingVault and get erc20\\n        balancerLP.safeApprove(address(compoundingVault), amount);\\n        shares = compoundingVault.deposit(amount);\\n        require(shares > 0, '!deposit');\\n\\n        // supply to market\\n        IERC20Upgradeable(address(compoundingVault)).safeApprove(address(dropsAuraMarket), shares);\\n        uint256 err = dropsAuraMarket.mintTo(shares, user);\\n        require(err == 0, '!mint');\\n        require(\\n            IERC20Upgradeable(address(dropsAuraMarket)).balanceOf(address(this)) > 0,\\n            '!no mint'\\n        );\\n\\n        // enable as collateral\\n        IDropsAuraComptroller comptroller = dropsAuraMarket.comptroller();\\n        address[] memory markets = new address[](1);\\n        markets[0] = address(dropsAuraMarket);\\n        comptroller.enterMarketsFrom(markets, user);\\n    }\\n\\n    /// @notice market will call this function to withdraw balancer LP or restake to Aura\\n    /// the market should send vault erc20 tokens before call this function\\n    /// @param withdrawType 1 for withdraw balancer LP, 2 for restake\\n    function redeem(\\n        address reciver,\\n        uint256 amount,\\n        uint256 withdrawType\\n    ) external whenNotPaused nonReentrant returns (uint256 withdrawBalance) {\\n        require(amount > 0, '!amount');\\n        require(reciver != address(0), '!reciver');\\n        require(msg.sender == address(dropsAuraMarket), '!market');\\n        require(withdrawType == 1 || withdrawType == 2, '!withdrawType');\\n        require(\\n            IERC20Upgradeable(address(compoundingVault)).balanceOf(address(this)) >= amount,\\n            '!vaultAmount'\\n        );\\n\\n        withdrawBalance = compoundingVault.withdraw(amount);\\n        require(withdrawBalance > 0, '!withdrawBalance');\\n        require(balancerLP.balanceOf(address(this)) >= withdrawBalance, '!lpBalance');\\n\\n        if (withdrawType == 1) {\\n            balancerLP.safeTransfer(reciver, withdrawBalance);\\n        } else {\\n            balancerLP.safeApprove(address(auraRewardPool), withdrawBalance);\\n            auraRewardPool.deposit(withdrawBalance, reciver);\\n        }\\n    }\\n\\n    /* ========== owner level functions ========== */\\n\\n    function pause() external whenNotPaused onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external whenPaused onlyOwner {\\n        _unpause();\\n    }\\n\\n    function emergencyWithdraw(address asset, address receiver) external onlyOwner {\\n        uint256 assetBalance;\\n        if (asset == address(0)) {\\n            // ether\\n            assetBalance = (address(this)).balance;\\n            payable(receiver).transfer(assetBalance);\\n        } else {\\n            assetBalance = IERC20Upgradeable(asset).balanceOf(address(this));\\n            IERC20Upgradeable(asset).safeTransfer(receiver, assetBalance);\\n        }\\n        if (assetBalance > 0) {\\n            emit LogEmergencyWithdraw(receiver, asset, assetBalance);\\n        }\\n    }\\n\\n    function setAddresses(\\n        IAuraBaseRewardPool _auraRewardPool,\\n        IDropsCompoundingVault _compoundingVault,\\n        IDropsAuraMarket _dropsAuraMarket\\n    ) external onlyOwner {\\n        _setAddresses(_auraRewardPool, _compoundingVault, _dropsAuraMarket);\\n    }\\n}\\n\",\"keccak256\":\"0xe5ebc34afc4d50e3653f395998751c18811bde7eb2c1c30d284591335ae79837\",\"license\":\"MIT\"},\"contracts/interfaces/aura/IAuraBaseRewardPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAuraBaseRewardPool {\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256);\\n\\n    function asset() external view returns (address);\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256);\\n\\n    // IERC20\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6251b4b6c2534ea9ffcd1c6e302649bf2359a47a577b358ca79792818cd95fcd\",\"license\":\"MIT\"},\"contracts/interfaces/drops/IDropsAuraMarket.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDropsAuraComptroller {\\n    function enterMarketsFrom(address[] memory cTokens, address from) external returns (uint256);\\n}\\n\\ninterface IDropsAuraMarket {\\n    function mintTo(uint256 mintAmount, address to) external returns (uint256);\\n\\n    function comptroller() external view returns (IDropsAuraComptroller);\\n}\\n\",\"keccak256\":\"0x519ef4f8369fa9b7e82734e11bee79eda0a064842014b7b823324ebae989b492\",\"license\":\"MIT\"},\"contracts/interfaces/drops/IDropsCompoundingVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\ninterface IDropsCompoundingVault {\\n    function deposit(uint amount) external returns (uint256);\\n\\n    function withdraw(uint amount) external returns (uint256);\\n\\n    function want() external view returns (IERC20Upgradeable);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3430fe6f58e85151282344a080d67ea2f6a3e05f6f2f725abed5c88c5c42597\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137e1806100206000396000f3fe6080604052600436106100e75760003560e01c8063733cfbd41161008a578063a966797511610059578063a966797514610297578063ad893096146102d4578063c0c53b8b146102ff578063f2fde38b1461031b576100e7565b8063733cfbd4146101ff5780638456cb591461022a5780638da5cb5b14610241578063a658e1341461026c576100e7565b80633f4ba83a116100c65780633f4ba83a1461017d5780635c975abb146101945780636382d9ad146101bf578063715018a6146101e8576100e7565b8062c36211146100ec5780632b83cccd14610117578063363bf96414610154575b600080fd5b3480156100f857600080fd5b50610101610344565b60405161010e9190612bed565b60405180910390f35b34801561012357600080fd5b5061013e60048036038101906101399190612504565b61036a565b60405161014b9190612f96565b60405180910390f35b34801561016057600080fd5b5061017b6004803603810190610176919061257c565b610963565b005b34801561018957600080fd5b5061019261097b565b005b3480156101a057600080fd5b506101a9610995565b6040516101b69190612bd2565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e191906124c8565b6109ac565b005b3480156101f457600080fd5b506101fd610b7b565b005b34801561020b57600080fd5b50610214610b8f565b6040516102219190612c08565b60405180910390f35b34801561023657600080fd5b5061023f610bb5565b005b34801561024d57600080fd5b50610256610bcf565b6040516102639190612b35565b60405180910390f35b34801561027857600080fd5b50610281610bf9565b60405161028e9190612c23565b60405180910390f35b3480156102a357600080fd5b506102be60048036038101906102b9919061261d565b610c1f565b6040516102cb9190612f96565b60405180910390f35b3480156102e057600080fd5b506102e9611508565b6040516102f69190612c3e565b60405180910390f35b6103196004803603810190610314919061257c565b61152e565b005b34801561032757600080fd5b50610342600480360381019061033d9190612476565b61168a565b005b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061037461170e565b61037c611758565b600083116103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690612eb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561042f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042690612e96565b60405180910390fd5b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b690612e16565b60405180910390fd5b60018214806104ce5750600282145b61050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490612df6565b60405180910390fd5b8260ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105699190612b35565b60206040518083038186803b15801561058157600080fd5b505afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190612646565b10156105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190612d96565b60405180910390fd5b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b81526004016106559190612f96565b602060405180830381600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a79190612646565b9050600081116106ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e390612cf6565b60405180910390fd5b8060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107489190612b35565b60206040518083038186803b15801561076057600080fd5b505afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190612646565b10156107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d090612e56565b60405180910390fd5b60018214156108345761082f848260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166117a89092919063ffffffff16565b610954565b6108a360c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661182e9092919063ffffffff16565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e553f6582866040518363ffffffff1660e01b8152600401610900929190612fb1565b602060405180830381600087803b15801561091a57600080fd5b505af115801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190612646565b505b61095c61198c565b9392505050565b61096b611995565b610976838383611a13565b505050565b610983611d01565b61098b611995565b610993611d4a565b565b6000609760009054906101000a900460ff16905090565b6109b4611995565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a50573073ffffffffffffffffffffffffffffffffffffffff163190508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a4a573d6000803e3d6000fd5b50610b07565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a899190612b35565b60206040518083038186803b158015610aa157600080fd5b505afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190612646565b9050610b0682828573ffffffffffffffffffffffffffffffffffffffff166117a89092919063ffffffff16565b5b6000811115610b76578273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f46250b0a744e514bfdb95561a293ae5220bba28e3ef598ba6772e909fefd7cc783604051610b6d9190612f96565b60405180910390a35b505050565b610b83611995565b610b8d6000611dad565b565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bbd61170e565b610bc5611995565b610bcd611e73565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c2961170e565b610c31611758565b60008211610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b90612eb6565b60405180910390fd5b60003390508260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b8152600401610cd7929190612b50565b60206040518083038186803b158015610cef57600080fd5b505afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190612646565b1015610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f90612dd6565b60405180910390fd5b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b460af948430846040518463ffffffff1660e01b8152600401610dc793929190612fda565b602060405180830381600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e199190612646565b508260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e769190612b35565b60206040518083038186803b158015610e8e57600080fd5b505afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec69190612646565b1015610f07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efe90612e36565b60405180910390fd5b610f7660ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661182e9092919063ffffffff16565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25846040518263ffffffff1660e01b8152600401610fd19190612f96565b602060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110239190612646565b915060008211611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f90612d76565b60405180910390fd5b6110d760cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661182e9092919063ffffffff16565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b723b34e84846040518363ffffffff1660e01b8152600401611136929190612fb1565b602060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111889190612646565b9050600081146111cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c490612ef6565b60405180910390fd5b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161122a9190612b35565b60206040518083038186803b15801561124257600080fd5b505afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a9190612646565b116112ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b190612f16565b60405180910390fd5b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561132457600080fd5b505afa158015611338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135c91906125cb565b90506000600167ffffffffffffffff8111156113a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156113cf5781602001602082028036833780820191505090505b50905060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061142f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166333e4212982866040518363ffffffff1660e01b81526004016114a4929190612ba2565b602060405180830381600087803b1580156114be57600080fd5b505af11580156114d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f69190612646565b505050505061150361198c565b919050565b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff1615905080801561155f5750600160008054906101000a900460ff1660ff16105b8061158c575061156e30611ed6565b15801561158b5750600160008054906101000a900460ff1660ff16145b5b6115cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c290612d56565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611608576001600060016101000a81548160ff0219169083151502179055505b611610611ef9565b611618611f52565b611620611fab565b61162b848484611a13565b80156116845760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161167b9190612c59565b60405180910390a15b50505050565b611692611995565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f990612cb6565b60405180910390fd5b61170b81611dad565b50565b611716610995565b15611756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174d90612d16565b60405180910390fd5b565b6002600154141561179e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179590612f56565b60405180910390fd5b6002600181905550565b6118298363a9059cbb60e01b84846040516024016117c7929190612b79565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612004565b505050565b60008114806118c7575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611875929190612b50565b60206040518083038186803b15801561188d57600080fd5b505afa1580156118a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c59190612646565b145b611906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fd90612f76565b60405180910390fd5b6119878363095ea7b360e01b8484604051602401611925929190612b79565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612004565b505050565b60018081905550565b61199d6120cc565b73ffffffffffffffffffffffffffffffffffffffff166119bb610bcf565b73ffffffffffffffffffffffffffffffffffffffff1614611a11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0890612db6565b60405180910390fd5b565b8173ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5957600080fd5b505afa158015611a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9191906125f4565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aed57600080fd5b505afa158015611b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b25919061249f565b73ffffffffffffffffffffffffffffffffffffffff1614611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7290612d36565b60405180910390fd5b8160ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8457600080fd5b505afa158015611c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbc919061249f565b60cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b611d09610995565b611d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3f90612c96565b60405180910390fd5b565b611d52611d01565b6000609760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d966120cc565b604051611da39190612b35565b60405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611e7b61170e565b6001609760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ebf6120cc565b604051611ecc9190612b35565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3f90612ed6565b60405180910390fd5b611f506120d4565b565b600060019054906101000a900460ff16611fa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9890612ed6565b60405180910390fd5b611fa9612135565b565b600060019054906101000a900460ff16611ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff190612ed6565b60405180910390fd5b61200261218d565b565b6000612066826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166121f99092919063ffffffff16565b90506000815114806120885750808060200190518101906120879190612553565b5b6120c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120be90612f36565b60405180910390fd5b505050565b600033905090565b600060019054906101000a900460ff16612123576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211a90612ed6565b60405180910390fd5b61213361212e6120cc565b611dad565b565b600060019054906101000a900460ff16612184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217b90612ed6565b60405180910390fd5b60018081905550565b600060019054906101000a900460ff166121dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d390612ed6565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b60606122088484600085612211565b90509392505050565b606082471015612256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224d90612cd6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161227f9190612b1e565b60006040518083038185875af1925050503d80600081146122bc576040519150601f19603f3d011682016040523d82523d6000602084013e6122c1565b606091505b50915091506122d2878383876122de565b92505050949350505050565b6060831561234157600083511415612339576122f985611ed6565b612338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232f90612e76565b60405180910390fd5b5b82905061234c565b61234b8383612354565b5b949350505050565b6000825111156123675781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239b9190612c74565b60405180910390fd5b6000813590506123b3816136f3565b92915050565b6000815190506123c8816136f3565b92915050565b6000815190506123dd8161370a565b92915050565b6000813590506123f281613721565b92915050565b60008151905061240781613738565b92915050565b60008135905061241c8161374f565b92915050565b60008135905061243181613766565b92915050565b6000815190506124468161377d565b92915050565b60008135905061245b81613794565b92915050565b60008151905061247081613794565b92915050565b60006020828403121561248857600080fd5b6000612496848285016123a4565b91505092915050565b6000602082840312156124b157600080fd5b60006124bf848285016123b9565b91505092915050565b600080604083850312156124db57600080fd5b60006124e9858286016123a4565b92505060206124fa858286016123a4565b9150509250929050565b60008060006060848603121561251957600080fd5b6000612527868287016123a4565b93505060206125388682870161244c565b92505060406125498682870161244c565b9150509250925092565b60006020828403121561256557600080fd5b6000612573848285016123ce565b91505092915050565b60008060006060848603121561259157600080fd5b600061259f868287016123e3565b93505060206125b086828701612422565b92505060406125c18682870161240d565b9150509250925092565b6000602082840312156125dd57600080fd5b60006125eb848285016123f8565b91505092915050565b60006020828403121561260657600080fd5b600061261484828501612437565b91505092915050565b60006020828403121561262f57600080fd5b600061263d8482850161244c565b91505092915050565b60006020828403121561265857600080fd5b600061266684828501612461565b91505092915050565b600061267b8383612687565b60208301905092915050565b6126908161307c565b82525050565b61269f8161307c565b82525050565b60006126b082613021565b6126ba818561304f565b93506126c583613011565b8060005b838110156126f65781516126dd888261266f565b97506126e883613042565b9250506001810190506126c9565b5085935050505092915050565b61270c8161308e565b82525050565b600061271d8261302c565b6127278185613060565b93506127378185602086016131cd565b80840191505092915050565b61274c8161312b565b82525050565b61275b8161314f565b82525050565b61276a81613173565b82525050565b61277981613197565b82525050565b612788816131bb565b82525050565b600061279982613037565b6127a3818561306b565b93506127b38185602086016131cd565b6127bc81613200565b840191505092915050565b60006127d460148361306b565b91506127df82613211565b602082019050919050565b60006127f760268361306b565b91506128028261323a565b604082019050919050565b600061281a60268361306b565b915061282582613289565b604082019050919050565b600061283d60108361306b565b9150612848826132d8565b602082019050919050565b600061286060108361306b565b915061286b82613301565b602082019050919050565b600061288360328361306b565b915061288e8261332a565b604082019050919050565b60006128a6602e8361306b565b91506128b182613379565b604082019050919050565b60006128c960088361306b565b91506128d4826133c8565b602082019050919050565b60006128ec600c8361306b565b91506128f7826133f1565b602082019050919050565b600061290f60208361306b565b915061291a8261341a565b602082019050919050565b6000612932600a8361306b565b915061293d82613443565b602082019050919050565b6000612955600d8361306b565b91506129608261346c565b602082019050919050565b600061297860078361306b565b915061298382613495565b602082019050919050565b600061299b60078361306b565b91506129a6826134be565b602082019050919050565b60006129be600a8361306b565b91506129c9826134e7565b602082019050919050565b60006129e1601d8361306b565b91506129ec82613510565b602082019050919050565b6000612a0460088361306b565b9150612a0f82613539565b602082019050919050565b6000612a2760078361306b565b9150612a3282613562565b602082019050919050565b6000612a4a602b8361306b565b9150612a558261358b565b604082019050919050565b6000612a6d60058361306b565b9150612a78826135da565b602082019050919050565b6000612a9060088361306b565b9150612a9b82613603565b602082019050919050565b6000612ab3602a8361306b565b9150612abe8261362c565b604082019050919050565b6000612ad6601f8361306b565b9150612ae18261367b565b602082019050919050565b6000612af960368361306b565b9150612b04826136a4565b604082019050919050565b612b1881613114565b82525050565b6000612b2a8284612712565b915081905092915050565b6000602082019050612b4a6000830184612696565b92915050565b6000604082019050612b656000830185612696565b612b726020830184612696565b9392505050565b6000604082019050612b8e6000830185612696565b612b9b6020830184612b0f565b9392505050565b60006040820190508181036000830152612bbc81856126a5565b9050612bcb6020830184612696565b9392505050565b6000602082019050612be76000830184612703565b92915050565b6000602082019050612c026000830184612743565b92915050565b6000602082019050612c1d6000830184612752565b92915050565b6000602082019050612c386000830184612761565b92915050565b6000602082019050612c536000830184612770565b92915050565b6000602082019050612c6e600083018461277f565b92915050565b60006020820190508181036000830152612c8e818461278e565b905092915050565b60006020820190508181036000830152612caf816127c7565b9050919050565b60006020820190508181036000830152612ccf816127ea565b9050919050565b60006020820190508181036000830152612cef8161280d565b9050919050565b60006020820190508181036000830152612d0f81612830565b9050919050565b60006020820190508181036000830152612d2f81612853565b9050919050565b60006020820190508181036000830152612d4f81612876565b9050919050565b60006020820190508181036000830152612d6f81612899565b9050919050565b60006020820190508181036000830152612d8f816128bc565b9050919050565b60006020820190508181036000830152612daf816128df565b9050919050565b60006020820190508181036000830152612dcf81612902565b9050919050565b60006020820190508181036000830152612def81612925565b9050919050565b60006020820190508181036000830152612e0f81612948565b9050919050565b60006020820190508181036000830152612e2f8161296b565b9050919050565b60006020820190508181036000830152612e4f8161298e565b9050919050565b60006020820190508181036000830152612e6f816129b1565b9050919050565b60006020820190508181036000830152612e8f816129d4565b9050919050565b60006020820190508181036000830152612eaf816129f7565b9050919050565b60006020820190508181036000830152612ecf81612a1a565b9050919050565b60006020820190508181036000830152612eef81612a3d565b9050919050565b60006020820190508181036000830152612f0f81612a60565b9050919050565b60006020820190508181036000830152612f2f81612a83565b9050919050565b60006020820190508181036000830152612f4f81612aa6565b9050919050565b60006020820190508181036000830152612f6f81612ac9565b9050919050565b60006020820190508181036000830152612f8f81612aec565b9050919050565b6000602082019050612fab6000830184612b0f565b92915050565b6000604082019050612fc66000830185612b0f565b612fd36020830184612696565b9392505050565b6000606082019050612fef6000830186612b0f565b612ffc6020830185612696565b6130096040830184612696565b949350505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613087826130f4565b9050919050565b60008115159050919050565b60006130a58261307c565b9050919050565b60006130b78261307c565b9050919050565b60006130c98261307c565b9050919050565b60006130db8261307c565b9050919050565b60006130ed8261307c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006131368261313d565b9050919050565b6000613148826130f4565b9050919050565b600061315a82613161565b9050919050565b600061316c826130f4565b9050919050565b600061317e82613185565b9050919050565b6000613190826130f4565b9050919050565b60006131a2826131a9565b9050919050565b60006131b4826130f4565b9050919050565b60006131c68261311e565b9050919050565b60005b838110156131eb5780820151818401526020810190506131d0565b838111156131fa576000848401525b50505050565b6000601f19601f8301169050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f21776974686472617742616c616e636500000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f6175726120617373657420617265206e6f742073616d65207769746820636f6d60008201527f706f756e64696e675661756c742077616e740000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f216465706f736974000000000000000000000000000000000000000000000000600082015250565b7f217661756c74416d6f756e740000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f21616c6c6f77616e636500000000000000000000000000000000000000000000600082015250565b7f2177697468647261775479706500000000000000000000000000000000000000600082015250565b7f216d61726b657400000000000000000000000000000000000000000000000000600082015250565b7f2161737365747300000000000000000000000000000000000000000000000000600082015250565b7f216c7042616c616e636500000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2172656369766572000000000000000000000000000000000000000000000000600082015250565b7f21616d6f756e7400000000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f216d696e74000000000000000000000000000000000000000000000000000000600082015250565b7f216e6f206d696e74000000000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6136fc8161307c565b811461370757600080fd5b50565b6137138161308e565b811461371e57600080fd5b50565b61372a8161309a565b811461373557600080fd5b50565b613741816130ac565b811461374c57600080fd5b50565b613758816130be565b811461376357600080fd5b50565b61376f816130d0565b811461377a57600080fd5b50565b613786816130e2565b811461379157600080fd5b50565b61379d81613114565b81146137a857600080fd5b5056fea26469706673582212203d0796b1319ce4a9751addd7e8d3063ff7f0b10668e6535ce0ded800553e5edf64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100e75760003560e01c8063733cfbd41161008a578063a966797511610059578063a966797514610297578063ad893096146102d4578063c0c53b8b146102ff578063f2fde38b1461031b576100e7565b8063733cfbd4146101ff5780638456cb591461022a5780638da5cb5b14610241578063a658e1341461026c576100e7565b80633f4ba83a116100c65780633f4ba83a1461017d5780635c975abb146101945780636382d9ad146101bf578063715018a6146101e8576100e7565b8062c36211146100ec5780632b83cccd14610117578063363bf96414610154575b600080fd5b3480156100f857600080fd5b50610101610344565b60405161010e9190612bed565b60405180910390f35b34801561012357600080fd5b5061013e60048036038101906101399190612504565b61036a565b60405161014b9190612f96565b60405180910390f35b34801561016057600080fd5b5061017b6004803603810190610176919061257c565b610963565b005b34801561018957600080fd5b5061019261097b565b005b3480156101a057600080fd5b506101a9610995565b6040516101b69190612bd2565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e191906124c8565b6109ac565b005b3480156101f457600080fd5b506101fd610b7b565b005b34801561020b57600080fd5b50610214610b8f565b6040516102219190612c08565b60405180910390f35b34801561023657600080fd5b5061023f610bb5565b005b34801561024d57600080fd5b50610256610bcf565b6040516102639190612b35565b60405180910390f35b34801561027857600080fd5b50610281610bf9565b60405161028e9190612c23565b60405180910390f35b3480156102a357600080fd5b506102be60048036038101906102b9919061261d565b610c1f565b6040516102cb9190612f96565b60405180910390f35b3480156102e057600080fd5b506102e9611508565b6040516102f69190612c3e565b60405180910390f35b6103196004803603810190610314919061257c565b61152e565b005b34801561032757600080fd5b50610342600480360381019061033d9190612476565b61168a565b005b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061037461170e565b61037c611758565b600083116103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690612eb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561042f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042690612e96565b60405180910390fd5b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b690612e16565b60405180910390fd5b60018214806104ce5750600282145b61050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490612df6565b60405180910390fd5b8260ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105699190612b35565b60206040518083038186803b15801561058157600080fd5b505afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190612646565b10156105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190612d96565b60405180910390fd5b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b81526004016106559190612f96565b602060405180830381600087803b15801561066f57600080fd5b505af1158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a79190612646565b9050600081116106ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e390612cf6565b60405180910390fd5b8060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107489190612b35565b60206040518083038186803b15801561076057600080fd5b505afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190612646565b10156107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d090612e56565b60405180910390fd5b60018214156108345761082f848260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166117a89092919063ffffffff16565b610954565b6108a360c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661182e9092919063ffffffff16565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e553f6582866040518363ffffffff1660e01b8152600401610900929190612fb1565b602060405180830381600087803b15801561091a57600080fd5b505af115801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190612646565b505b61095c61198c565b9392505050565b61096b611995565b610976838383611a13565b505050565b610983611d01565b61098b611995565b610993611d4a565b565b6000609760009054906101000a900460ff16905090565b6109b4611995565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a50573073ffffffffffffffffffffffffffffffffffffffff163190508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a4a573d6000803e3d6000fd5b50610b07565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a899190612b35565b60206040518083038186803b158015610aa157600080fd5b505afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190612646565b9050610b0682828573ffffffffffffffffffffffffffffffffffffffff166117a89092919063ffffffff16565b5b6000811115610b76578273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f46250b0a744e514bfdb95561a293ae5220bba28e3ef598ba6772e909fefd7cc783604051610b6d9190612f96565b60405180910390a35b505050565b610b83611995565b610b8d6000611dad565b565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bbd61170e565b610bc5611995565b610bcd611e73565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c2961170e565b610c31611758565b60008211610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b90612eb6565b60405180910390fd5b60003390508260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b8152600401610cd7929190612b50565b60206040518083038186803b158015610cef57600080fd5b505afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190612646565b1015610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f90612dd6565b60405180910390fd5b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b460af948430846040518463ffffffff1660e01b8152600401610dc793929190612fda565b602060405180830381600087803b158015610de157600080fd5b505af1158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e199190612646565b508260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e769190612b35565b60206040518083038186803b158015610e8e57600080fd5b505afa158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec69190612646565b1015610f07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efe90612e36565b60405180910390fd5b610f7660ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661182e9092919063ffffffff16565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25846040518263ffffffff1660e01b8152600401610fd19190612f96565b602060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110239190612646565b915060008211611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f90612d76565b60405180910390fd5b6110d760cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661182e9092919063ffffffff16565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b723b34e84846040518363ffffffff1660e01b8152600401611136929190612fb1565b602060405180830381600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111889190612646565b9050600081146111cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c490612ef6565b60405180910390fd5b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161122a9190612b35565b60206040518083038186803b15801561124257600080fd5b505afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a9190612646565b116112ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b190612f16565b60405180910390fd5b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561132457600080fd5b505afa158015611338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135c91906125cb565b90506000600167ffffffffffffffff8111156113a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156113cf5781602001602082028036833780820191505090505b50905060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061142f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166333e4212982866040518363ffffffff1660e01b81526004016114a4929190612ba2565b602060405180830381600087803b1580156114be57600080fd5b505af11580156114d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f69190612646565b505050505061150361198c565b919050565b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff1615905080801561155f5750600160008054906101000a900460ff1660ff16105b8061158c575061156e30611ed6565b15801561158b5750600160008054906101000a900460ff1660ff16145b5b6115cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c290612d56565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611608576001600060016101000a81548160ff0219169083151502179055505b611610611ef9565b611618611f52565b611620611fab565b61162b848484611a13565b80156116845760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161167b9190612c59565b60405180910390a15b50505050565b611692611995565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f990612cb6565b60405180910390fd5b61170b81611dad565b50565b611716610995565b15611756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174d90612d16565b60405180910390fd5b565b6002600154141561179e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179590612f56565b60405180910390fd5b6002600181905550565b6118298363a9059cbb60e01b84846040516024016117c7929190612b79565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612004565b505050565b60008114806118c7575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611875929190612b50565b60206040518083038186803b15801561188d57600080fd5b505afa1580156118a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c59190612646565b145b611906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fd90612f76565b60405180910390fd5b6119878363095ea7b360e01b8484604051602401611925929190612b79565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612004565b505050565b60018081905550565b61199d6120cc565b73ffffffffffffffffffffffffffffffffffffffff166119bb610bcf565b73ffffffffffffffffffffffffffffffffffffffff1614611a11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0890612db6565b60405180910390fd5b565b8173ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5957600080fd5b505afa158015611a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9191906125f4565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aed57600080fd5b505afa158015611b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b25919061249f565b73ffffffffffffffffffffffffffffffffffffffff1614611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7290612d36565b60405180910390fd5b8160ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8457600080fd5b505afa158015611c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbc919061249f565b60cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b611d09610995565b611d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3f90612c96565b60405180910390fd5b565b611d52611d01565b6000609760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d966120cc565b604051611da39190612b35565b60405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611e7b61170e565b6001609760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ebf6120cc565b604051611ecc9190612b35565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3f90612ed6565b60405180910390fd5b611f506120d4565b565b600060019054906101000a900460ff16611fa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9890612ed6565b60405180910390fd5b611fa9612135565b565b600060019054906101000a900460ff16611ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff190612ed6565b60405180910390fd5b61200261218d565b565b6000612066826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166121f99092919063ffffffff16565b90506000815114806120885750808060200190518101906120879190612553565b5b6120c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120be90612f36565b60405180910390fd5b505050565b600033905090565b600060019054906101000a900460ff16612123576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211a90612ed6565b60405180910390fd5b61213361212e6120cc565b611dad565b565b600060019054906101000a900460ff16612184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217b90612ed6565b60405180910390fd5b60018081905550565b600060019054906101000a900460ff166121dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d390612ed6565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b60606122088484600085612211565b90509392505050565b606082471015612256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224d90612cd6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161227f9190612b1e565b60006040518083038185875af1925050503d80600081146122bc576040519150601f19603f3d011682016040523d82523d6000602084013e6122c1565b606091505b50915091506122d2878383876122de565b92505050949350505050565b6060831561234157600083511415612339576122f985611ed6565b612338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232f90612e76565b60405180910390fd5b5b82905061234c565b61234b8383612354565b5b949350505050565b6000825111156123675781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239b9190612c74565b60405180910390fd5b6000813590506123b3816136f3565b92915050565b6000815190506123c8816136f3565b92915050565b6000815190506123dd8161370a565b92915050565b6000813590506123f281613721565b92915050565b60008151905061240781613738565b92915050565b60008135905061241c8161374f565b92915050565b60008135905061243181613766565b92915050565b6000815190506124468161377d565b92915050565b60008135905061245b81613794565b92915050565b60008151905061247081613794565b92915050565b60006020828403121561248857600080fd5b6000612496848285016123a4565b91505092915050565b6000602082840312156124b157600080fd5b60006124bf848285016123b9565b91505092915050565b600080604083850312156124db57600080fd5b60006124e9858286016123a4565b92505060206124fa858286016123a4565b9150509250929050565b60008060006060848603121561251957600080fd5b6000612527868287016123a4565b93505060206125388682870161244c565b92505060406125498682870161244c565b9150509250925092565b60006020828403121561256557600080fd5b6000612573848285016123ce565b91505092915050565b60008060006060848603121561259157600080fd5b600061259f868287016123e3565b93505060206125b086828701612422565b92505060406125c18682870161240d565b9150509250925092565b6000602082840312156125dd57600080fd5b60006125eb848285016123f8565b91505092915050565b60006020828403121561260657600080fd5b600061261484828501612437565b91505092915050565b60006020828403121561262f57600080fd5b600061263d8482850161244c565b91505092915050565b60006020828403121561265857600080fd5b600061266684828501612461565b91505092915050565b600061267b8383612687565b60208301905092915050565b6126908161307c565b82525050565b61269f8161307c565b82525050565b60006126b082613021565b6126ba818561304f565b93506126c583613011565b8060005b838110156126f65781516126dd888261266f565b97506126e883613042565b9250506001810190506126c9565b5085935050505092915050565b61270c8161308e565b82525050565b600061271d8261302c565b6127278185613060565b93506127378185602086016131cd565b80840191505092915050565b61274c8161312b565b82525050565b61275b8161314f565b82525050565b61276a81613173565b82525050565b61277981613197565b82525050565b612788816131bb565b82525050565b600061279982613037565b6127a3818561306b565b93506127b38185602086016131cd565b6127bc81613200565b840191505092915050565b60006127d460148361306b565b91506127df82613211565b602082019050919050565b60006127f760268361306b565b91506128028261323a565b604082019050919050565b600061281a60268361306b565b915061282582613289565b604082019050919050565b600061283d60108361306b565b9150612848826132d8565b602082019050919050565b600061286060108361306b565b915061286b82613301565b602082019050919050565b600061288360328361306b565b915061288e8261332a565b604082019050919050565b60006128a6602e8361306b565b91506128b182613379565b604082019050919050565b60006128c960088361306b565b91506128d4826133c8565b602082019050919050565b60006128ec600c8361306b565b91506128f7826133f1565b602082019050919050565b600061290f60208361306b565b915061291a8261341a565b602082019050919050565b6000612932600a8361306b565b915061293d82613443565b602082019050919050565b6000612955600d8361306b565b91506129608261346c565b602082019050919050565b600061297860078361306b565b915061298382613495565b602082019050919050565b600061299b60078361306b565b91506129a6826134be565b602082019050919050565b60006129be600a8361306b565b91506129c9826134e7565b602082019050919050565b60006129e1601d8361306b565b91506129ec82613510565b602082019050919050565b6000612a0460088361306b565b9150612a0f82613539565b602082019050919050565b6000612a2760078361306b565b9150612a3282613562565b602082019050919050565b6000612a4a602b8361306b565b9150612a558261358b565b604082019050919050565b6000612a6d60058361306b565b9150612a78826135da565b602082019050919050565b6000612a9060088361306b565b9150612a9b82613603565b602082019050919050565b6000612ab3602a8361306b565b9150612abe8261362c565b604082019050919050565b6000612ad6601f8361306b565b9150612ae18261367b565b602082019050919050565b6000612af960368361306b565b9150612b04826136a4565b604082019050919050565b612b1881613114565b82525050565b6000612b2a8284612712565b915081905092915050565b6000602082019050612b4a6000830184612696565b92915050565b6000604082019050612b656000830185612696565b612b726020830184612696565b9392505050565b6000604082019050612b8e6000830185612696565b612b9b6020830184612b0f565b9392505050565b60006040820190508181036000830152612bbc81856126a5565b9050612bcb6020830184612696565b9392505050565b6000602082019050612be76000830184612703565b92915050565b6000602082019050612c026000830184612743565b92915050565b6000602082019050612c1d6000830184612752565b92915050565b6000602082019050612c386000830184612761565b92915050565b6000602082019050612c536000830184612770565b92915050565b6000602082019050612c6e600083018461277f565b92915050565b60006020820190508181036000830152612c8e818461278e565b905092915050565b60006020820190508181036000830152612caf816127c7565b9050919050565b60006020820190508181036000830152612ccf816127ea565b9050919050565b60006020820190508181036000830152612cef8161280d565b9050919050565b60006020820190508181036000830152612d0f81612830565b9050919050565b60006020820190508181036000830152612d2f81612853565b9050919050565b60006020820190508181036000830152612d4f81612876565b9050919050565b60006020820190508181036000830152612d6f81612899565b9050919050565b60006020820190508181036000830152612d8f816128bc565b9050919050565b60006020820190508181036000830152612daf816128df565b9050919050565b60006020820190508181036000830152612dcf81612902565b9050919050565b60006020820190508181036000830152612def81612925565b9050919050565b60006020820190508181036000830152612e0f81612948565b9050919050565b60006020820190508181036000830152612e2f8161296b565b9050919050565b60006020820190508181036000830152612e4f8161298e565b9050919050565b60006020820190508181036000830152612e6f816129b1565b9050919050565b60006020820190508181036000830152612e8f816129d4565b9050919050565b60006020820190508181036000830152612eaf816129f7565b9050919050565b60006020820190508181036000830152612ecf81612a1a565b9050919050565b60006020820190508181036000830152612eef81612a3d565b9050919050565b60006020820190508181036000830152612f0f81612a60565b9050919050565b60006020820190508181036000830152612f2f81612a83565b9050919050565b60006020820190508181036000830152612f4f81612aa6565b9050919050565b60006020820190508181036000830152612f6f81612ac9565b9050919050565b60006020820190508181036000830152612f8f81612aec565b9050919050565b6000602082019050612fab6000830184612b0f565b92915050565b6000604082019050612fc66000830185612b0f565b612fd36020830184612696565b9392505050565b6000606082019050612fef6000830186612b0f565b612ffc6020830185612696565b6130096040830184612696565b949350505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613087826130f4565b9050919050565b60008115159050919050565b60006130a58261307c565b9050919050565b60006130b78261307c565b9050919050565b60006130c98261307c565b9050919050565b60006130db8261307c565b9050919050565b60006130ed8261307c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006131368261313d565b9050919050565b6000613148826130f4565b9050919050565b600061315a82613161565b9050919050565b600061316c826130f4565b9050919050565b600061317e82613185565b9050919050565b6000613190826130f4565b9050919050565b60006131a2826131a9565b9050919050565b60006131b4826130f4565b9050919050565b60006131c68261311e565b9050919050565b60005b838110156131eb5780820151818401526020810190506131d0565b838111156131fa576000848401525b50505050565b6000601f19601f8301169050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f21776974686472617742616c616e636500000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f6175726120617373657420617265206e6f742073616d65207769746820636f6d60008201527f706f756e64696e675661756c742077616e740000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f216465706f736974000000000000000000000000000000000000000000000000600082015250565b7f217661756c74416d6f756e740000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f21616c6c6f77616e636500000000000000000000000000000000000000000000600082015250565b7f2177697468647261775479706500000000000000000000000000000000000000600082015250565b7f216d61726b657400000000000000000000000000000000000000000000000000600082015250565b7f2161737365747300000000000000000000000000000000000000000000000000600082015250565b7f216c7042616c616e636500000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2172656369766572000000000000000000000000000000000000000000000000600082015250565b7f21616d6f756e7400000000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f216d696e74000000000000000000000000000000000000000000000000000000600082015250565b7f216e6f206d696e74000000000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6136fc8161307c565b811461370757600080fd5b50565b6137138161308e565b811461371e57600080fd5b50565b61372a8161309a565b811461373557600080fd5b50565b613741816130ac565b811461374c57600080fd5b50565b613758816130be565b811461376357600080fd5b50565b61376f816130d0565b811461377a57600080fd5b50565b613786816130e2565b811461379157600080fd5b50565b61379d81613114565b81146137a857600080fd5b5056fea26469706673582212203d0796b1319ce4a9751addd7e8d3063ff7f0b10668e6535ce0ded800553e5edf64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeem(address,uint256,uint256)": {
        "params": {
          "withdrawType": "1 for withdraw balancer LP, 2 for restake"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supplyToMarket(uint256)": {
        "details": "caller should approve this contract before calling.      also enables supplied assets as collateral in the market",
        "params": {
          "amount": "of Aura pool tokens to withdraw"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AuraLPMigration: get balanceLP from Aura and supply",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogEmergencyWithdraw(address,address,uint256)": {
        "notice": "emitted when withdraw happens"
      }
    },
    "kind": "user",
    "methods": {
      "auraRewardPool()": {
        "notice": "aura base reward pool"
      },
      "balancerLP()": {
        "notice": "balancer LP token"
      },
      "compoundingVault()": {
        "notice": "auto compounding vault"
      },
      "dropsAuraMarket()": {
        "notice": "drops CToken for aura market"
      },
      "redeem(address,uint256,uint256)": {
        "notice": "market will call this function to withdraw balancer LP or restake to Aura the market should send vault erc20 tokens before call this function"
      },
      "supplyToMarket(uint256)": {
        "notice": "withdraw LP tokens from Aura and supply to market"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 232,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 235,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 535,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 604,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1466,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 104,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 224,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 520,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3342,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "auraRewardPool",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IAuraBaseRewardPool)4429"
      },
      {
        "astId": 3346,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "compoundingVault",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IDropsCompoundingVault)4545"
      },
      {
        "astId": 3350,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "dropsAuraMarket",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IDropsAuraMarket)4516"
      },
      {
        "astId": 3354,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "balancerLP",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IERC20Upgradeable)683"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAuraBaseRewardPool)4429": {
        "encoding": "inplace",
        "label": "contract IAuraBaseRewardPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDropsAuraMarket)4516": {
        "encoding": "inplace",
        "label": "contract IDropsAuraMarket",
        "numberOfBytes": "20"
      },
      "t_contract(IDropsCompoundingVault)4545": {
        "encoding": "inplace",
        "label": "contract IDropsCompoundingVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)683": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}