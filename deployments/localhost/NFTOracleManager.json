{
  "address": "0xE2b5bDE7e80f89975f7229d78aD9259b2723d11F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "oracleList",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "statusList",
          "type": "bool[]"
        }
      ],
      "name": "OraclesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "oracleList",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "prices",
          "type": "int256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PricesSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "min",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "max",
          "type": "int256"
        }
      ],
      "name": "RateSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "oracles",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "prices",
          "type": "int256[]"
        }
      ],
      "name": "batchUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "getUpdateAvailablePriceRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupport",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "minPrice",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "maxPrice",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "nextRound",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxChangeRate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minChangeRate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "oracles",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "statusList",
          "type": "bool[]"
        }
      ],
      "name": "setOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "min",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "max",
          "type": "int256"
        }
      ],
      "name": "setRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportOracles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe479227e3cd83ed9143117ab66cd2466654b0f4d38935c17f7dd1e6c783a352c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE2b5bDE7e80f89975f7229d78aD9259b2723d11F",
    "transactionIndex": 0,
    "gasUsed": "2112408",
    "logsBloom": "0x
    "blockHash": "0xcb28bebcf80f27161b2275d22f4e3130c1eae77635b90b69abab74250001824a",
    "transactionHash": "0xe479227e3cd83ed9143117ab66cd2466654b0f4d38935c17f7dd1e6c783a352c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17539584,
        "transactionHash": "0xe479227e3cd83ed9143117ab66cd2466654b0f4d38935c17f7dd1e6c783a352c",
        "address": "0xE2b5bDE7e80f89975f7229d78aD9259b2723d11F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcb28bebcf80f27161b2275d22f4e3130c1eae77635b90b69abab74250001824a"
      }
    ],
    "blockNumber": 17539584,
    "cumulativeGasUsed": "2112408",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2a79c4162b5952a6aa195452c697c39b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oracleList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"statusList\",\"type\":\"bool[]\"}],\"name\":\"OraclesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oracleList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"prices\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PricesSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"min\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"max\",\"type\":\"int256\"}],\"name\":\"RateSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"prices\",\"type\":\"int256[]\"}],\"name\":\"batchUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"getUpdateAvailablePriceRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupport\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"minPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"nextRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxChangeRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minChangeRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statusList\",\"type\":\"bool[]\"}],\"name\":\"setOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"min\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"max\",\"type\":\"int256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportOracles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchUpdate(address[],int256[])\":{\"params\":{\"oracles\":\"list of the chainlink oracle\",\"prices\":\"list of prices to submit\"}},\"getUpdateAvailablePriceRange(address)\":{\"params\":{\"oracle\":\"address of the chainlink oracle\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setManager(address,bool)\":{\"params\":{\"manager\":\"address of manager\",\"status\":\"bool status of the manager\"}},\"setOracles(address[],bool[])\":{\"params\":{\"oracles\":\"array of chainlink aggregator contracts\",\"statusList\":\"array of bool status\"}},\"setRate(int256,int256)\":{\"params\":{\"max\":\"% of max\",\"min\":\"% of min\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"contract for managing NFT oracles that protocol supports\",\"version\":1},\"userdoc\":{\"events\":{\"LogWithdraw(address,address,uint256)\":{\"notice\":\"emitted when withdraw happens\"},\"ManagerSet(address,bool)\":{\"notice\":\"emitted when manager is set\"},\"OraclesSet(address[],bool[])\":{\"notice\":\"emitted when oracles are set\"},\"PricesSubmitted(address[],int256[],uint256)\":{\"notice\":\"emitted when prices are submitted\"},\"RateSet(int256,int256)\":{\"notice\":\"emitted when updatable price range is set\"}},\"kind\":\"user\",\"methods\":{\"batchUpdate(address[],int256[])\":{\"notice\":\"submit prices to chainlink aggregators\"},\"getUpdateAvailablePriceRange(address)\":{\"notice\":\"calculate the updatable price range for the next round\"},\"isManager(address)\":{\"notice\":\"manager who can call this function to submit prices\"},\"minChangeRate()\":{\"notice\":\"updatable price range for the next round\"},\"setManager(address,bool)\":{\"notice\":\"set manager who can call this contract to submit prices\"},\"setOracles(address[],bool[])\":{\"notice\":\"set oracle contracts into nfts\"},\"setRate(int256,int256)\":{\"notice\":\"set min and max rate for the price updatable range\"},\"supportOracles(address)\":{\"notice\":\"chainlink aggregator oracle contract => support?\"},\"withdraw(address,address)\":{\"notice\":\"withdraw assets from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/NFTOracleManager.sol\":\"NFTOracleManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/oracle/NFTOracleManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IOracle is AggregatorInterface {\\n    function submit(uint256 roundId, int256 price) external;\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\n/**\\n * @title contract for managing NFT oracles that protocol supports\\n */\\ncontract NFTOracleManager is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address constant ETHER = address(0);\\n\\n    /// @notice chainlink aggregator oracle contract => support?\\n    mapping(address => bool) public supportOracles;\\n\\n    /// @notice manager who can call this function to submit prices\\n    mapping(address => bool) public isManager;\\n\\n    /// @notice updatable price range for the next round\\n    int public minChangeRate;\\n    int public maxChangeRate;\\n\\n    /// @notice emitted when manager is set\\n    event ManagerSet(address manager, bool status);\\n\\n    /// @notice emitted when updatable price range is set\\n    event RateSet(int256 min, int256 max);\\n\\n    /// @notice emitted when oracles are set\\n    event OraclesSet(address[] oracleList, bool[] statusList);\\n\\n    /// @notice emitted when prices are submitted\\n    event PricesSubmitted(address[] oracleList, int256[] prices, uint timestamp);\\n\\n    /// @notice emitted when withdraw happens\\n    event LogWithdraw(address indexed from, address indexed asset, uint amount);\\n\\n    constructor() {\\n        minChangeRate = 300; // 30%\\n        maxChangeRate = 300; // 30%\\n    }\\n\\n    /// @notice set oracle contracts into nfts\\n    /// @param oracles array of chainlink aggregator contracts\\n    /// @param statusList array of bool status\\n    function setOracles(address[] memory oracles, bool[] memory statusList) external onlyOwner {\\n        require(oracles.length == statusList.length, 'setOracles: Invalid param length');\\n\\n        for (uint index = 0; index < oracles.length; index++) {\\n            supportOracles[oracles[index]] = statusList[index];\\n        }\\n\\n        emit OraclesSet(oracles, statusList);\\n    }\\n\\n    /// @notice set manager who can call this contract to submit prices\\n    /// @param manager address of manager\\n    /// @param status bool status of the manager\\n    function setManager(address manager, bool status) external onlyOwner {\\n        isManager[manager] = status;\\n\\n        emit ManagerSet(manager, status);\\n    }\\n\\n    /// @notice set min and max rate for the price updatable range\\n    /// @param min % of min\\n    /// @param max % of max\\n    function setRate(int min, int max) external onlyOwner {\\n        require(min > 0 && min < 1000 && max > 0 && max < 1000, 'setRate: Invalid Param');\\n\\n        minChangeRate = min;\\n        maxChangeRate = max;\\n\\n        emit RateSet(minChangeRate, maxChangeRate);\\n    }\\n\\n    /// @notice calculate the updatable price range for the next round\\n    /// @param oracle address of the chainlink oracle\\n    function getUpdateAvailablePriceRange(\\n        address oracle\\n    ) external view returns (bool isSupport, int256 minPrice, int256 maxPrice, uint256 nextRound) {\\n        int256 prevPrice = IOracle(oracle).latestAnswer();\\n\\n        minPrice = (prevPrice * minChangeRate) / 1000;\\n        maxPrice = (prevPrice * maxChangeRate) / 1000;\\n        nextRound = IOracle(oracle).latestRound() + 1;\\n        isSupport = supportOracles[oracle];\\n    }\\n\\n    /// @notice submit prices to chainlink aggregators\\n    /// @param oracles list of the chainlink oracle\\n    /// @param prices list of prices to submit\\n    function batchUpdate(address[] memory oracles, int256[] memory prices) public {\\n        require(isManager[msg.sender] || owner() == _msgSender(), 'batchUpdate: Not manager');\\n        require(oracles.length == prices.length, 'batchUpdate: Invalid param length');\\n\\n        for (uint index = 0; index < oracles.length; index++) {\\n            address oracle = oracles[index];\\n            if (supportOracles[oracle]) {\\n                uint256 roundId = IOracle(oracle).latestRound();\\n                IOracle(oracle).submit(roundId + 1, prices[index]);\\n            }\\n        }\\n\\n        emit PricesSubmitted(oracles, prices, block.timestamp);\\n    }\\n\\n    /// @notice withdraw assets from the contract\\n    function withdraw(address asset, address receiver) public onlyOwner {\\n        uint assetBalance;\\n        if (asset == ETHER) {\\n            address self = address(this); // workaround for a possible solidity bug\\n            assetBalance = self.balance;\\n            payable(receiver).transfer(assetBalance);\\n        } else {\\n            assetBalance = IERC20(asset).balanceOf(address(this));\\n            IERC20(asset).safeTransfer(receiver, assetBalance);\\n        }\\n        emit LogWithdraw(receiver, asset, assetBalance);\\n    }\\n}\\n\",\"keccak256\":\"0xa455a8ebe86ff32738b907c4592a75aef999e148f01f97e694da35adcdd303e6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261004460201b60201c565b61004c60201b60201c565b61012c60038190555061012c600481905550610110565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61241980620001206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063ac4b81d31161008c578063e1f95e4511610066578063e1f95e45146101ed578063f2fde38b1461020b578063f3ae241514610227578063f940e38514610257576100cf565b8063ac4b81d31461016e578063ba544ced146101a1578063bfe402f4146101d1576100cf565b806313364508146100d457806348971acd146100f0578063715018a61461010c57806385faf624146101165780638da5cb5b14610134578063a5e90eee14610152575b600080fd5b6100ee60048036038101906100e9919061145b565b610273565b005b61010a600480360381019061010591906114c7565b6103f3565b005b61011461073b565b005b61011e61074f565b60405161012b9190611aba565b60405180910390f35b61013c610755565b6040516101499190611971565b60405180910390f35b61016c6004803603810190610167919061141f565b61077e565b005b610188600480360381019061018391906113ba565b61081a565b6040516101989493929190611a75565b60405180910390f35b6101bb60048036038101906101b691906113ba565b6109bf565b6040516101c89190611a5a565b60405180910390f35b6101eb60048036038101906101e69190611585565b6109df565b005b6101f5610a9f565b6040516102029190611aba565b60405180910390f35b610225600480360381019061022091906113ba565b610aa5565b005b610241600480360381019061023c91906113ba565b610b29565b60405161024e9190611a5a565b60405180910390f35b610271600480360381019061026c91906113e3565b610b49565b005b61027b610d14565b80518251146102bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690611c20565b60405180910390fd5b60005b82518110156103b557818181518110610304577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160016000858481518110610349577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806103ad90612097565b9150506102c2565b507feb256ec3927d5d5812547681f0cec38acd12c94205e0a4b586cb989c57df0cee82826040516103e79291906119de565b60405180910390a15050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610484575061044e610d92565b73ffffffffffffffffffffffffffffffffffffffff1661046c610755565b73ffffffffffffffffffffffffffffffffffffffff16145b6104c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ba90611bc0565b60405180910390fd5b8051825114610507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fe90611b80565b60405180910390fd5b60005b82518110156106fb57600083828151811061054e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156106e75760008173ffffffffffffffffffffffffffffffffffffffff1663668a0f026040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f257600080fd5b505afa158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a91906115c1565b90508173ffffffffffffffffffffffffffffffffffffffff1663202ee0ed6001836106559190611e0a565b86868151811061068e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016106b3929190611c5b565b600060405180830381600087803b1580156106cd57600080fd5b505af11580156106e1573d6000803e3d6000fd5b50505050505b5080806106f390612097565b91505061050a565b507f8497944601feab42f42de752a3f83e454989ea3f827513babfbc7910781eb2fe82824260405161072f93929190611a15565b60405180910390a15050565b610743610d14565b61074d6000610d9a565b565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610786610d14565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fff83ce179bad4fbdb0e98074011487cde624295a52d8189d92d5d8b06c914eda828260405161080e92919061198c565b60405180910390a15050565b60008060008060008573ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561086857600080fd5b505afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a0919061155c565b90506103e8600354826108b39190611eca565b6108bd9190611e60565b93506103e8600454826108d09190611eca565b6108da9190611e60565b925060018673ffffffffffffffffffffffffffffffffffffffff1663668a0f026040518163ffffffff1660e01b815260040160206040518083038186803b15801561092457600080fd5b505afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c91906115c1565b6109669190611e0a565b9150600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169450509193509193565b60016020528060005260406000206000915054906101000a900460ff1681565b6109e7610d14565b6000821380156109f857506103e882125b8015610a045750600081135b8015610a1157506103e881125b610a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4790611b20565b60405180910390fd5b81600381905550806004819055507f1c393c49b54f486a33825e7b6383870c1e1fb1b2d8a480de3eb2286ba8e60bee600354600454604051610a93929190611ad5565b60405180910390a15050565b60035481565b610aad610d14565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1490611b40565b60405180910390fd5b610b2681610d9a565b50565b60026020528060005260406000206000915054906101000a900460ff1681565b610b51610d14565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610bf35760003090508073ffffffffffffffffffffffffffffffffffffffff163191508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610bec573d6000803e3d6000fd5b5050610caa565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c2c9190611971565b60206040518083038186803b158015610c4457600080fd5b505afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c91906115c1565b9050610ca982828573ffffffffffffffffffffffffffffffffffffffff16610e5e9092919063ffffffff16565b5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f9207361cc2a04b9c7a06691df1eb87c6a63957ae88bf01d0d18c81e3d127209983604051610d079190611c40565b60405180910390a3505050565b610d1c610d92565b73ffffffffffffffffffffffffffffffffffffffff16610d3a610755565b73ffffffffffffffffffffffffffffffffffffffff1614610d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8790611ba0565b60405180910390fd5b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610edf8363a9059cbb60e01b8484604051602401610e7d9291906119b5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ee4565b505050565b6000610f46826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610fac9092919063ffffffff16565b9050600081511480610f68575080806020019051810190610f679190611533565b5b610fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9e90611c00565b60405180910390fd5b505050565b6060610fbb8484600085610fc4565b90509392505050565b606082471015611009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100090611b60565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611032919061195a565b60006040518083038185875af1925050503d806000811461106f576040519150601f19603f3d011682016040523d82523d6000602084013e611074565b606091505b509150915061108587838387611091565b92505050949350505050565b606083156110f4576000835114156110ec576110ac85611107565b6110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e290611be0565b60405180910390fd5b5b8290506110ff565b6110fe838361112a565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561113d5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111719190611afe565b60405180910390fd5b600061118d61118884611ca9565b611c84565b905080838252602082019050828560208602820111156111ac57600080fd5b60005b858110156111dc57816111c288826112be565b8452602084019350602083019250506001810190506111af565b5050509392505050565b60006111f96111f484611cd5565b611c84565b9050808382526020820190508285602086028201111561121857600080fd5b60005b85811015611248578161122e8882611351565b84526020840193506020830192505060018101905061121b565b5050509392505050565b600061126561126084611d01565b611c84565b9050808382526020820190508285602086028201111561128457600080fd5b60005b858110156112b4578161129a888261137b565b845260208401935060208301925050600181019050611287565b5050509392505050565b6000813590506112cd81612387565b92915050565b600082601f8301126112e457600080fd5b81356112f484826020860161117a565b91505092915050565b600082601f83011261130e57600080fd5b813561131e8482602086016111e6565b91505092915050565b600082601f83011261133857600080fd5b8135611348848260208601611252565b91505092915050565b6000813590506113608161239e565b92915050565b6000815190506113758161239e565b92915050565b60008135905061138a816123b5565b92915050565b60008151905061139f816123b5565b92915050565b6000815190506113b4816123cc565b92915050565b6000602082840312156113cc57600080fd5b60006113da848285016112be565b91505092915050565b600080604083850312156113f657600080fd5b6000611404858286016112be565b9250506020611415858286016112be565b9150509250929050565b6000806040838503121561143257600080fd5b6000611440858286016112be565b925050602061145185828601611351565b9150509250929050565b6000806040838503121561146e57600080fd5b600083013567ffffffffffffffff81111561148857600080fd5b611494858286016112d3565b925050602083013567ffffffffffffffff8111156114b157600080fd5b6114bd858286016112fd565b9150509250929050565b600080604083850312156114da57600080fd5b600083013567ffffffffffffffff8111156114f457600080fd5b611500858286016112d3565b925050602083013567ffffffffffffffff81111561151d57600080fd5b61152985828601611327565b9150509250929050565b60006020828403121561154557600080fd5b600061155384828501611366565b91505092915050565b60006020828403121561156e57600080fd5b600061157c84828501611390565b91505092915050565b6000806040838503121561159857600080fd5b60006115a68582860161137b565b92505060206115b78582860161137b565b9150509250929050565b6000602082840312156115d357600080fd5b60006115e1848285016113a5565b91505092915050565b60006115f68383611632565b60208301905092915050565b600061160e838361176a565b60208301905092915050565b600061162683836117b9565b60208301905092915050565b61163b81611fe1565b82525050565b61164a81611fe1565b82525050565b600061165b82611d5d565b6116658185611dbb565b935061167083611d2d565b8060005b838110156116a157815161168888826115ea565b975061169383611d94565b925050600181019050611674565b5085935050505092915050565b60006116b982611d68565b6116c38185611dcc565b93506116ce83611d3d565b8060005b838110156116ff5781516116e68882611602565b97506116f183611da1565b9250506001810190506116d2565b5085935050505092915050565b600061171782611d73565b6117218185611ddd565b935061172c83611d4d565b8060005b8381101561175d578151611744888261161a565b975061174f83611dae565b925050600181019050611730565b5085935050505092915050565b61177381611ff3565b82525050565b61178281611ff3565b82525050565b600061179382611d7e565b61179d8185611dee565b93506117ad818560208601612033565b80840191505092915050565b6117c281611fff565b82525050565b6117d181611fff565b82525050565b60006117e282611d89565b6117ec8185611df9565b93506117fc818560208601612033565b6118058161216d565b840191505092915050565b600061181d601683611df9565b91506118288261217e565b602082019050919050565b6000611840602683611df9565b915061184b826121a7565b604082019050919050565b6000611863602683611df9565b915061186e826121f6565b604082019050919050565b6000611886602183611df9565b915061189182612245565b604082019050919050565b60006118a9602083611df9565b91506118b482612294565b602082019050919050565b60006118cc601883611df9565b91506118d7826122bd565b602082019050919050565b60006118ef601d83611df9565b91506118fa826122e6565b602082019050919050565b6000611912602a83611df9565b915061191d8261230f565b604082019050919050565b6000611935602083611df9565b91506119408261235e565b602082019050919050565b61195481612029565b82525050565b60006119668284611788565b915081905092915050565b60006020820190506119866000830184611641565b92915050565b60006040820190506119a16000830185611641565b6119ae6020830184611779565b9392505050565b60006040820190506119ca6000830185611641565b6119d7602083018461194b565b9392505050565b600060408201905081810360008301526119f88185611650565b90508181036020830152611a0c81846116ae565b90509392505050565b60006060820190508181036000830152611a2f8186611650565b90508181036020830152611a43818561170c565b9050611a52604083018461194b565b949350505050565b6000602082019050611a6f6000830184611779565b92915050565b6000608082019050611a8a6000830187611779565b611a9760208301866117c8565b611aa460408301856117c8565b611ab1606083018461194b565b95945050505050565b6000602082019050611acf60008301846117c8565b92915050565b6000604082019050611aea60008301856117c8565b611af760208301846117c8565b9392505050565b60006020820190508181036000830152611b1881846117d7565b905092915050565b60006020820190508181036000830152611b3981611810565b9050919050565b60006020820190508181036000830152611b5981611833565b9050919050565b60006020820190508181036000830152611b7981611856565b9050919050565b60006020820190508181036000830152611b9981611879565b9050919050565b60006020820190508181036000830152611bb98161189c565b9050919050565b60006020820190508181036000830152611bd9816118bf565b9050919050565b60006020820190508181036000830152611bf9816118e2565b9050919050565b60006020820190508181036000830152611c1981611905565b9050919050565b60006020820190508181036000830152611c3981611928565b9050919050565b6000602082019050611c55600083018461194b565b92915050565b6000604082019050611c70600083018561194b565b611c7d60208301846117c8565b9392505050565b6000611c8e611c9f565b9050611c9a8282612066565b919050565b6000604051905090565b600067ffffffffffffffff821115611cc457611cc361213e565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611cf057611cef61213e565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611d1c57611d1b61213e565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611e1582612029565b9150611e2083612029565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e5557611e546120e0565b5b828201905092915050565b6000611e6b82611fff565b9150611e7683611fff565b925082611e8657611e8561210f565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615611ebf57611ebe6120e0565b5b828205905092915050565b6000611ed582611fff565b9150611ee083611fff565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611f1f57611f1e6120e0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611f5c57611f5b6120e0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611f9957611f986120e0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615611fd657611fd56120e0565b5b828202905092915050565b6000611fec82612009565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015612051578082015181840152602081019050612036565b83811115612060576000848401525b50505050565b61206f8261216d565b810181811067ffffffffffffffff8211171561208e5761208d61213e565b5b80604052505050565b60006120a282612029565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156120d5576120d46120e0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f736574526174653a20496e76616c696420506172616d00000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f62617463685570646174653a20496e76616c696420706172616d206c656e677460008201527f6800000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f62617463685570646174653a204e6f74206d616e616765720000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f7365744f7261636c65733a20496e76616c696420706172616d206c656e677468600082015250565b61239081611fe1565b811461239b57600080fd5b50565b6123a781611ff3565b81146123b257600080fd5b50565b6123be81611fff565b81146123c957600080fd5b50565b6123d581612029565b81146123e057600080fd5b5056fea26469706673582212207d2579b5fb29b68f62aed53340abe0cd86c3048cb3f391db3c25264f06fc525964736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchUpdate(address[],int256[])": {
        "params": {
          "oracles": "list of the chainlink oracle",
          "prices": "list of prices to submit"
        }
      },
      "getUpdateAvailablePriceRange(address)": {
        "params": {
          "oracle": "address of the chainlink oracle"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setManager(address,bool)": {
        "params": {
          "manager": "address of manager",
          "status": "bool status of the manager"
        }
      },
      "setOracles(address[],bool[])": {
        "params": {
          "oracles": "array of chainlink aggregator contracts",
          "statusList": "array of bool status"
        }
      },
      "setRate(int256,int256)": {
        "params": {
          "max": "% of max",
          "min": "% of min"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "contract for managing NFT oracles that protocol supports",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogWithdraw(address,address,uint256)": {
        "notice": "emitted when withdraw happens"
      },
      "ManagerSet(address,bool)": {
        "notice": "emitted when manager is set"
      },
      "OraclesSet(address[],bool[])": {
        "notice": "emitted when oracles are set"
      },
      "PricesSubmitted(address[],int256[],uint256)": {
        "notice": "emitted when prices are submitted"
      },
      "RateSet(int256,int256)": {
        "notice": "emitted when updatable price range is set"
      }
    },
    "kind": "user",
    "methods": {
      "batchUpdate(address[],int256[])": {
        "notice": "submit prices to chainlink aggregators"
      },
      "getUpdateAvailablePriceRange(address)": {
        "notice": "calculate the updatable price range for the next round"
      },
      "isManager(address)": {
        "notice": "manager who can call this function to submit prices"
      },
      "minChangeRate()": {
        "notice": "updatable price range for the next round"
      },
      "setManager(address,bool)": {
        "notice": "set manager who can call this contract to submit prices"
      },
      "setOracles(address[],bool[])": {
        "notice": "set oracle contracts into nfts"
      },
      "setRate(int256,int256)": {
        "notice": "set min and max rate for the price updatable range"
      },
      "supportOracles(address)": {
        "notice": "chainlink aggregator oracle contract => support?"
      },
      "withdraw(address,address)": {
        "notice": "withdraw assets from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1475,
        "contract": "contracts/oracle/NFTOracleManager.sol:NFTOracleManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7345,
        "contract": "contracts/oracle/NFTOracleManager.sol:NFTOracleManager",
        "label": "supportOracles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7350,
        "contract": "contracts/oracle/NFTOracleManager.sol:NFTOracleManager",
        "label": "isManager",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7353,
        "contract": "contracts/oracle/NFTOracleManager.sol:NFTOracleManager",
        "label": "minChangeRate",
        "offset": 0,
        "slot": "3",
        "type": "t_int256"
      },
      {
        "astId": 7355,
        "contract": "contracts/oracle/NFTOracleManager.sol:NFTOracleManager",
        "label": "maxChangeRate",
        "offset": 0,
        "slot": "4",
        "type": "t_int256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}