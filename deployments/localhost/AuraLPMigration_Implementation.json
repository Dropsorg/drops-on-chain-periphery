{
  "address": "0x12456Fa31e57F91B70629c1196337074c966492a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogEmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "auraRewardPool",
      "outputs": [
        {
          "internalType": "contract IAuraBaseRewardPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerLP",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundingVault",
      "outputs": [
        {
          "internalType": "contract IDropsCompoundingVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dropsAuraMarket",
      "outputs": [
        {
          "internalType": "contract IDropsAuraMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuraBaseRewardPool",
          "name": "_auraRewardPool",
          "type": "address"
        },
        {
          "internalType": "contract IDropsCompoundingVault",
          "name": "_compoundingVault",
          "type": "address"
        },
        {
          "internalType": "contract IDropsAuraMarket",
          "name": "_dropsAuraMarket",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reciver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawType",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAuraBaseRewardPool",
          "name": "_auraRewardPool",
          "type": "address"
        },
        {
          "internalType": "contract IDropsCompoundingVault",
          "name": "_compoundingVault",
          "type": "address"
        },
        {
          "internalType": "contract IDropsAuraMarket",
          "name": "_dropsAuraMarket",
          "type": "address"
        }
      ],
      "name": "setAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supplyToMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71385cb1dafaa3d1bb04c2123611287a499b8b9bd23548f081c190aa0bb68c3d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x12456Fa31e57F91B70629c1196337074c966492a",
    "transactionIndex": 0,
    "gasUsed": "2971733",
    "logsBloom": "0x
    "blockHash": "0x1dc451ba1f9a6dc0a5cc433588b880286f534c1c4f50ad627356ea5796a9e521",
    "transactionHash": "0x71385cb1dafaa3d1bb04c2123611287a499b8b9bd23548f081c190aa0bb68c3d",
    "logs": [],
    "blockNumber": 17536033,
    "cumulativeGasUsed": "2971733",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2a79c4162b5952a6aa195452c697c39b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auraRewardPool\",\"outputs\":[{\"internalType\":\"contract IAuraBaseRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerLP\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundingVault\",\"outputs\":[{\"internalType\":\"contract IDropsCompoundingVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropsAuraMarket\",\"outputs\":[{\"internalType\":\"contract IDropsAuraMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuraBaseRewardPool\",\"name\":\"_auraRewardPool\",\"type\":\"address\"},{\"internalType\":\"contract IDropsCompoundingVault\",\"name\":\"_compoundingVault\",\"type\":\"address\"},{\"internalType\":\"contract IDropsAuraMarket\",\"name\":\"_dropsAuraMarket\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawType\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuraBaseRewardPool\",\"name\":\"_auraRewardPool\",\"type\":\"address\"},{\"internalType\":\"contract IDropsCompoundingVault\",\"name\":\"_compoundingVault\",\"type\":\"address\"},{\"internalType\":\"contract IDropsAuraMarket\",\"name\":\"_dropsAuraMarket\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supplyToMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeem(address,uint256,uint256)\":{\"params\":{\"withdrawType\":\"1 for withdraw balancer LP, 2 for restake\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supplyToMarket(uint256)\":{\"details\":\"caller should approve this contract before calling.      also enables supplied assets as collateral in the market\",\"params\":{\"amount\":\"of Aura pool tokens to withdraw\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AuraLPMigration: get balanceLP from Aura and supply\",\"version\":1},\"userdoc\":{\"events\":{\"LogEmergencyWithdraw(address,address,uint256)\":{\"notice\":\"emitted when withdraw happens\"}},\"kind\":\"user\",\"methods\":{\"auraRewardPool()\":{\"notice\":\"aura base reward pool\"},\"balancerLP()\":{\"notice\":\"balancer LP token\"},\"compoundingVault()\":{\"notice\":\"auto compounding vault\"},\"dropsAuraMarket()\":{\"notice\":\"drops CToken for aura market\"},\"redeem(address,uint256,uint256)\":{\"notice\":\"market will call this function to withdraw balancer LP or restake to Aura the market should send vault erc20 tokens before call this function\"},\"supplyToMarket(uint256)\":{\"notice\":\"withdraw LP tokens from Aura and supply to market\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/d6-market-migrations/AuraLPMigration.sol\":\"AuraLPMigration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x4dae161227d332808312ee2caf6384929321b83c16cc89b5642985fbec6b814c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/d6-market-migrations/AuraLPMigration.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nimport '../interfaces/drops/IDropsCompoundingVault.sol';\\nimport '../interfaces/drops/IDropsAuraMarket.sol';\\nimport '../interfaces/aura/IAuraBaseRewardPool.sol';\\n\\n/** @title AuraLPMigration: get balanceLP from Aura and supply\\n */\\ncontract AuraLPMigration is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice aura base reward pool\\n    IAuraBaseRewardPool public auraRewardPool;\\n\\n    /// @notice auto compounding vault\\n    IDropsCompoundingVault public compoundingVault;\\n\\n    /// @notice drops CToken for aura market\\n    IDropsAuraMarket public dropsAuraMarket;\\n\\n    /// @notice balancer LP token\\n    IERC20Upgradeable public balancerLP;\\n\\n    /// @notice emitted when withdraw happens\\n    event LogEmergencyWithdraw(address indexed from, address indexed asset, uint256 amount);\\n\\n    function initialize(\\n        IAuraBaseRewardPool _auraRewardPool,\\n        IDropsCompoundingVault _compoundingVault,\\n        IDropsAuraMarket _dropsAuraMarket\\n    ) public payable initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        require(\\n            _auraRewardPool.asset() == address(_compoundingVault.want()),\\n            'aura asset are not same with compoundingVault want'\\n        );\\n\\n        compoundingVault = _compoundingVault;\\n        auraRewardPool = _auraRewardPool;\\n        dropsAuraMarket = _dropsAuraMarket;\\n        balancerLP = IERC20Upgradeable(_auraRewardPool.asset());\\n    }\\n\\n    /// @notice withdraw LP tokens from Aura and supply to market\\n    /// @dev caller should approve this contract before calling.\\n    ///      also enables supplied assets as collateral in the market\\n    /// @param amount of Aura pool tokens to withdraw\\n    function supplyToMarket(\\n        uint256 amount\\n    ) external whenNotPaused nonReentrant returns (uint256 shares) {\\n        address user = msg.sender;\\n\\n        require(auraRewardPool.allowance(user, address(this)) >= amount, '!allowance');\\n\\n        // withdraw from Aura\\n        auraRewardPool.withdraw(amount, address(this), user);\\n        require(balancerLP.balanceOf(address(this)) >= amount, '!assets');\\n\\n        // deposit into compounding compoundingVault and get erc20\\n        balancerLP.approve(address(compoundingVault), amount);\\n        shares = compoundingVault.deposit(amount);\\n\\n        // supply to market\\n        uint256 err = dropsAuraMarket.mintTo(shares, user);\\n        require(err != 0, '!mint');\\n\\n        // enable as collateral\\n        IDropsAuraComptroller comptroller = dropsAuraMarket.comptroller();\\n        address[] memory markets = new address[](1);\\n        markets[0] = address(dropsAuraMarket);\\n        comptroller.enterMarketsFrom(markets, user);\\n    }\\n\\n    /// @notice market will call this function to withdraw balancer LP or restake to Aura\\n    /// the market should send vault erc20 tokens before call this function\\n    /// @param withdrawType 1 for withdraw balancer LP, 2 for restake\\n    function redeem(\\n        address reciver,\\n        uint256 amount,\\n        uint256 withdrawType\\n    ) external whenNotPaused nonReentrant {\\n        require(msg.sender == address(dropsAuraMarket), '!market');\\n        require(withdrawType == 1 || withdrawType == 2, '!withdrawType');\\n        require(\\n            IERC20Upgradeable(address(compoundingVault)).balanceOf(address(this)) >= amount,\\n            '!vaultAmount'\\n        );\\n\\n        uint256 withdrawBalance = compoundingVault.withdraw(amount);\\n        require(withdrawBalance > 0, '!withdrawBalance');\\n        require(balancerLP.balanceOf(address(this)) >= withdrawBalance, '!lpBalance');\\n\\n        if (withdrawType == 1) {\\n            balancerLP.safeTransfer(reciver, withdrawBalance);\\n        } else {\\n            balancerLP.approve(address(auraRewardPool), withdrawBalance);\\n            auraRewardPool.stakeFor(reciver, withdrawBalance);\\n        }\\n    }\\n\\n    /* ========== owner level functions ========== */\\n\\n    function pause() external whenNotPaused onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external whenPaused onlyOwner {\\n        _unpause();\\n    }\\n\\n    function emergencyWithdraw(address asset, address receiver) external onlyOwner {\\n        uint256 assetBalance;\\n        if (asset == address(0)) {\\n            // ether\\n            assetBalance = (address(this)).balance;\\n            payable(receiver).transfer(assetBalance);\\n        } else {\\n            assetBalance = IERC20Upgradeable(asset).balanceOf(address(this));\\n            IERC20Upgradeable(asset).safeTransfer(receiver, assetBalance);\\n        }\\n        if (assetBalance > 0) {\\n            emit LogEmergencyWithdraw(receiver, asset, assetBalance);\\n        }\\n    }\\n\\n    function setAddresses(\\n        IAuraBaseRewardPool _auraRewardPool,\\n        IDropsCompoundingVault _compoundingVault,\\n        IDropsAuraMarket _dropsAuraMarket\\n    ) external onlyOwner {\\n        require(\\n            _auraRewardPool.asset() == address(_compoundingVault.want()),\\n            'aura asset are not same with compoundingVault want'\\n        );\\n\\n        compoundingVault = _compoundingVault;\\n        auraRewardPool = _auraRewardPool;\\n        dropsAuraMarket = _dropsAuraMarket;\\n        balancerLP = IERC20Upgradeable(_auraRewardPool.asset());\\n    }\\n}\\n\",\"keccak256\":\"0x336603c7272d232e24741487911c043ca2afbf3d95ca4dcd6143203cc4b4b7da\",\"license\":\"MIT\"},\"contracts/interfaces/aura/IAuraBaseRewardPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAuraBaseRewardPool {\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256);\\n\\n    function asset() external view returns (address);\\n\\n    function stakeFor(address account, uint256 amount) external;\\n\\n    // IERC20\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9c44f74afbe4a5771bd9f80a172a3e1eed592592e45a87abe14a5640ca151ab\",\"license\":\"MIT\"},\"contracts/interfaces/drops/IDropsAuraMarket.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDropsAuraComptroller {\\n    function enterMarketsFrom(address[] memory cTokens, address from) external returns (uint256);\\n}\\n\\ninterface IDropsAuraMarket {\\n    function mintTo(uint256 mintAmount, address to) external returns (uint256);\\n\\n    function comptroller() external view returns (IDropsAuraComptroller);\\n}\\n\",\"keccak256\":\"0x519ef4f8369fa9b7e82734e11bee79eda0a064842014b7b823324ebae989b492\",\"license\":\"MIT\"},\"contracts/interfaces/drops/IDropsCompoundingVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\ninterface IDropsCompoundingVault {\\n    function deposit(uint amount) external returns (uint256);\\n\\n    function withdraw(uint amount) external returns (uint256);\\n\\n    function want() external view returns (IERC20Upgradeable);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3430fe6f58e85151282344a080d67ea2f6a3e05f6f2f725abed5c88c5c42597\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061350b806100206000396000f3fe6080604052600436106100e75760003560e01c8063733cfbd41161008a578063a966797511610059578063a966797514610283578063ad893096146102c0578063c0c53b8b146102eb578063f2fde38b14610307576100e7565b8063733cfbd4146101eb5780638456cb59146102165780638da5cb5b1461022d578063a658e13414610258576100e7565b80633f4ba83a116100c65780633f4ba83a146101695780635c975abb146101805780636382d9ad146101ab578063715018a6146101d4576100e7565b8062c36211146100ec5780632b83cccd14610117578063363bf96414610140575b600080fd5b3480156100f857600080fd5b50610101610330565b60405161010e9190612aaa565b60405180910390f35b34801561012357600080fd5b5061013e60048036038101906101399190612470565b610356565b005b34801561014c57600080fd5b50610167600480360381019061016291906124e8565b6108dd565b005b34801561017557600080fd5b5061017e610bd3565b005b34801561018c57600080fd5b50610195610bed565b6040516101a29190612a8f565b60405180910390f35b3480156101b757600080fd5b506101d260048036038101906101cd9190612434565b610c04565b005b3480156101e057600080fd5b506101e9610dd3565b005b3480156101f757600080fd5b50610200610de7565b60405161020d9190612ac5565b60405180910390f35b34801561022257600080fd5b5061022b610e0d565b005b34801561023957600080fd5b50610242610e27565b60405161024f91906129f2565b60405180910390f35b34801561026457600080fd5b5061026d610e51565b60405161027a9190612ae0565b60405180910390f35b34801561028f57600080fd5b506102aa60048036038101906102a59190612589565b610e77565b6040516102b79190612db3565b60405180910390f35b3480156102cc57600080fd5b506102d56115e2565b6040516102e29190612afb565b60405180910390f35b610305600480360381019061030091906124e8565b611608565b005b34801561031357600080fd5b5061032e600480360381019061032991906123e2565b611a42565b005b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61035e611ac6565b610366611b10565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ed90612cb3565b60405180910390fd5b60018114806104055750600281145b610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b90612c93565b60405180910390fd5b8160ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104a091906129f2565b60206040518083038186803b1580156104b857600080fd5b505afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f091906125b2565b1015610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890612c33565b60405180910390fd5b600060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b815260040161058e9190612db3565b602060405180830381600087803b1580156105a857600080fd5b505af11580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e091906125b2565b905060008111610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90612bb3565b60405180910390fd5b8060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161068191906129f2565b60206040518083038186803b15801561069957600080fd5b505afa1580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d191906125b2565b1015610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990612cf3565b60405180910390fd5b600182141561076d57610768848260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b609092919063ffffffff16565b6108cf565b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016107ec929190612a36565b602060405180830381600087803b15801561080657600080fd5b505af115801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e91906124bf565b5060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ee4090885836040518363ffffffff1660e01b815260040161089c929190612a36565b600060405180830381600087803b1580156108b657600080fd5b505af11580156108ca573d6000803e3d6000fd5b505050505b506108d8611be6565b505050565b6108e5611bef565b8173ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190612560565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109bf57600080fd5b505afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f7919061240b565b73ffffffffffffffffffffffffffffffffffffffff1614610a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4490612bf3565b60405180910390fd5b8160ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e919061240b565b60cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b610bdb611c6d565b610be3611bef565b610beb611cb6565b565b6000609760009054906101000a900460ff16905090565b610c0c611bef565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ca8573073ffffffffffffffffffffffffffffffffffffffff163190508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ca2573d6000803e3d6000fd5b50610d5f565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ce191906129f2565b60206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3191906125b2565b9050610d5e82828573ffffffffffffffffffffffffffffffffffffffff16611b609092919063ffffffff16565b5b6000811115610dce578273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f46250b0a744e514bfdb95561a293ae5220bba28e3ef598ba6772e909fefd7cc783604051610dc59190612db3565b60405180910390a35b505050565b610ddb611bef565b610de56000611d19565b565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e15611ac6565b610e1d611bef565b610e25611ddf565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e81611ac6565b610e89611b10565b60003390508260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b8152600401610eec929190612a0d565b60206040518083038186803b158015610f0457600080fd5b505afa158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c91906125b2565b1015610f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7490612c73565b60405180910390fd5b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b460af948430846040518463ffffffff1660e01b8152600401610fdc93929190612df7565b602060405180830381600087803b158015610ff657600080fd5b505af115801561100a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102e91906125b2565b508260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161108b91906129f2565b60206040518083038186803b1580156110a357600080fd5b505afa1580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db91906125b2565b101561111c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111390612cd3565b60405180910390fd5b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b815260040161119b929190612a36565b602060405180830381600087803b1580156111b557600080fd5b505af11580156111c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ed91906124bf565b5060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25846040518263ffffffff1660e01b81526004016112499190612db3565b602060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b91906125b2565b9150600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b723b34e84846040518363ffffffff1660e01b81526004016112fc929190612dce565b602060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e91906125b2565b90506000811415611394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138b90612d53565b60405180910390fd5b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156113fe57600080fd5b505afa158015611412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114369190612537565b90506000600167ffffffffffffffff81111561147b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156114a95781602001602082028036833780820191505090505b50905060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110611509577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166333e4212982866040518363ffffffff1660e01b815260040161157e929190612a5f565b602060405180830381600087803b15801561159857600080fd5b505af11580156115ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d091906125b2565b50505050506115dd611be6565b919050565b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156116395750600160008054906101000a900460ff1660ff16105b80611666575061164830611e42565b1580156116655750600160008054906101000a900460ff1660ff16145b5b6116a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169c90612c13565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156116e2576001600060016101000a81548160ff0219169083151502179055505b6116ea611e65565b6116f2611ebe565b6116fa611f17565b8273ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561174057600080fd5b505afa158015611754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117789190612560565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117d457600080fd5b505afa1580156117e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180c919061240b565b73ffffffffffffffffffffffffffffffffffffffff1614611862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185990612bf3565b60405180910390fd5b8260ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196b57600080fd5b505afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a3919061240b565b60cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015611a3c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611a339190612b16565b60405180910390a15b50505050565b611a4a611bef565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab190612b73565b60405180910390fd5b611ac381611d19565b50565b611ace610bed565b15611b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0590612bd3565b60405180910390fd5b565b60026001541415611b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4d90612d93565b60405180910390fd5b6002600181905550565b611be18363a9059cbb60e01b8484604051602401611b7f929190612a36565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f70565b505050565b60018081905550565b611bf7612038565b73ffffffffffffffffffffffffffffffffffffffff16611c15610e27565b73ffffffffffffffffffffffffffffffffffffffff1614611c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6290612c53565b60405180910390fd5b565b611c75610bed565b611cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cab90612b53565b60405180910390fd5b565b611cbe611c6d565b6000609760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d02612038565b604051611d0f91906129f2565b60405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611de7611ac6565b6001609760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e2b612038565b604051611e3891906129f2565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab90612d33565b60405180910390fd5b611ebc612040565b565b600060019054906101000a900460ff16611f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0490612d33565b60405180910390fd5b611f156120a1565b565b600060019054906101000a900460ff16611f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5d90612d33565b60405180910390fd5b611f6e6120f9565b565b6000611fd2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166121659092919063ffffffff16565b9050600081511480611ff4575080806020019051810190611ff391906124bf565b5b612033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202a90612d73565b60405180910390fd5b505050565b600033905090565b600060019054906101000a900460ff1661208f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208690612d33565b60405180910390fd5b61209f61209a612038565b611d19565b565b600060019054906101000a900460ff166120f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e790612d33565b60405180910390fd5b60018081905550565b600060019054906101000a900460ff16612148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213f90612d33565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b6060612174848460008561217d565b90509392505050565b6060824710156121c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b990612b93565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516121eb91906129db565b60006040518083038185875af1925050503d8060008114612228576040519150601f19603f3d011682016040523d82523d6000602084013e61222d565b606091505b509150915061223e8783838761224a565b92505050949350505050565b606083156122ad576000835114156122a55761226585611e42565b6122a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229b90612d13565b60405180910390fd5b5b8290506122b8565b6122b783836122c0565b5b949350505050565b6000825111156122d35781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123079190612b31565b60405180910390fd5b60008135905061231f8161341d565b92915050565b6000815190506123348161341d565b92915050565b60008151905061234981613434565b92915050565b60008135905061235e8161344b565b92915050565b60008151905061237381613462565b92915050565b60008135905061238881613479565b92915050565b60008135905061239d81613490565b92915050565b6000815190506123b2816134a7565b92915050565b6000813590506123c7816134be565b92915050565b6000815190506123dc816134be565b92915050565b6000602082840312156123f457600080fd5b600061240284828501612310565b91505092915050565b60006020828403121561241d57600080fd5b600061242b84828501612325565b91505092915050565b6000806040838503121561244757600080fd5b600061245585828601612310565b925050602061246685828601612310565b9150509250929050565b60008060006060848603121561248557600080fd5b600061249386828701612310565b93505060206124a4868287016123b8565b92505060406124b5868287016123b8565b9150509250925092565b6000602082840312156124d157600080fd5b60006124df8482850161233a565b91505092915050565b6000806000606084860312156124fd57600080fd5b600061250b8682870161234f565b935050602061251c8682870161238e565b925050604061252d86828701612379565b9150509250925092565b60006020828403121561254957600080fd5b600061255784828501612364565b91505092915050565b60006020828403121561257257600080fd5b6000612580848285016123a3565b91505092915050565b60006020828403121561259b57600080fd5b60006125a9848285016123b8565b91505092915050565b6000602082840312156125c457600080fd5b60006125d2848285016123cd565b91505092915050565b60006125e783836125f3565b60208301905092915050565b6125fc81612e99565b82525050565b61260b81612e99565b82525050565b600061261c82612e3e565b6126268185612e6c565b935061263183612e2e565b8060005b8381101561266257815161264988826125db565b975061265483612e5f565b925050600181019050612635565b5085935050505092915050565b61267881612eab565b82525050565b600061268982612e49565b6126938185612e7d565b93506126a3818560208601612fea565b80840191505092915050565b6126b881612f48565b82525050565b6126c781612f6c565b82525050565b6126d681612f90565b82525050565b6126e581612fb4565b82525050565b6126f481612fd8565b82525050565b600061270582612e54565b61270f8185612e88565b935061271f818560208601612fea565b6127288161301d565b840191505092915050565b6000612740601483612e88565b915061274b8261302e565b602082019050919050565b6000612763602683612e88565b915061276e82613057565b604082019050919050565b6000612786602683612e88565b9150612791826130a6565b604082019050919050565b60006127a9601083612e88565b91506127b4826130f5565b602082019050919050565b60006127cc601083612e88565b91506127d78261311e565b602082019050919050565b60006127ef603283612e88565b91506127fa82613147565b604082019050919050565b6000612812602e83612e88565b915061281d82613196565b604082019050919050565b6000612835600c83612e88565b9150612840826131e5565b602082019050919050565b6000612858602083612e88565b91506128638261320e565b602082019050919050565b600061287b600a83612e88565b915061288682613237565b602082019050919050565b600061289e600d83612e88565b91506128a982613260565b602082019050919050565b60006128c1600783612e88565b91506128cc82613289565b602082019050919050565b60006128e4600783612e88565b91506128ef826132b2565b602082019050919050565b6000612907600a83612e88565b9150612912826132db565b602082019050919050565b600061292a601d83612e88565b915061293582613304565b602082019050919050565b600061294d602b83612e88565b91506129588261332d565b604082019050919050565b6000612970600583612e88565b915061297b8261337c565b602082019050919050565b6000612993602a83612e88565b915061299e826133a5565b604082019050919050565b60006129b6601f83612e88565b91506129c1826133f4565b602082019050919050565b6129d581612f31565b82525050565b60006129e7828461267e565b915081905092915050565b6000602082019050612a076000830184612602565b92915050565b6000604082019050612a226000830185612602565b612a2f6020830184612602565b9392505050565b6000604082019050612a4b6000830185612602565b612a5860208301846129cc565b9392505050565b60006040820190508181036000830152612a798185612611565b9050612a886020830184612602565b9392505050565b6000602082019050612aa4600083018461266f565b92915050565b6000602082019050612abf60008301846126af565b92915050565b6000602082019050612ada60008301846126be565b92915050565b6000602082019050612af560008301846126cd565b92915050565b6000602082019050612b1060008301846126dc565b92915050565b6000602082019050612b2b60008301846126eb565b92915050565b60006020820190508181036000830152612b4b81846126fa565b905092915050565b60006020820190508181036000830152612b6c81612733565b9050919050565b60006020820190508181036000830152612b8c81612756565b9050919050565b60006020820190508181036000830152612bac81612779565b9050919050565b60006020820190508181036000830152612bcc8161279c565b9050919050565b60006020820190508181036000830152612bec816127bf565b9050919050565b60006020820190508181036000830152612c0c816127e2565b9050919050565b60006020820190508181036000830152612c2c81612805565b9050919050565b60006020820190508181036000830152612c4c81612828565b9050919050565b60006020820190508181036000830152612c6c8161284b565b9050919050565b60006020820190508181036000830152612c8c8161286e565b9050919050565b60006020820190508181036000830152612cac81612891565b9050919050565b60006020820190508181036000830152612ccc816128b4565b9050919050565b60006020820190508181036000830152612cec816128d7565b9050919050565b60006020820190508181036000830152612d0c816128fa565b9050919050565b60006020820190508181036000830152612d2c8161291d565b9050919050565b60006020820190508181036000830152612d4c81612940565b9050919050565b60006020820190508181036000830152612d6c81612963565b9050919050565b60006020820190508181036000830152612d8c81612986565b9050919050565b60006020820190508181036000830152612dac816129a9565b9050919050565b6000602082019050612dc860008301846129cc565b92915050565b6000604082019050612de360008301856129cc565b612df06020830184612602565b9392505050565b6000606082019050612e0c60008301866129cc565b612e196020830185612602565b612e266040830184612602565b949350505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612ea482612f11565b9050919050565b60008115159050919050565b6000612ec282612e99565b9050919050565b6000612ed482612e99565b9050919050565b6000612ee682612e99565b9050919050565b6000612ef882612e99565b9050919050565b6000612f0a82612e99565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612f5382612f5a565b9050919050565b6000612f6582612f11565b9050919050565b6000612f7782612f7e565b9050919050565b6000612f8982612f11565b9050919050565b6000612f9b82612fa2565b9050919050565b6000612fad82612f11565b9050919050565b6000612fbf82612fc6565b9050919050565b6000612fd182612f11565b9050919050565b6000612fe382612f3b565b9050919050565b60005b83811015613008578082015181840152602081019050612fed565b83811115613017576000848401525b50505050565b6000601f19601f8301169050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f21776974686472617742616c616e636500000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f6175726120617373657420617265206e6f742073616d65207769746820636f6d60008201527f706f756e64696e675661756c742077616e740000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f217661756c74416d6f756e740000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f21616c6c6f77616e636500000000000000000000000000000000000000000000600082015250565b7f2177697468647261775479706500000000000000000000000000000000000000600082015250565b7f216d61726b657400000000000000000000000000000000000000000000000000600082015250565b7f2161737365747300000000000000000000000000000000000000000000000000600082015250565b7f216c7042616c616e636500000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f216d696e74000000000000000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61342681612e99565b811461343157600080fd5b50565b61343d81612eab565b811461344857600080fd5b50565b61345481612eb7565b811461345f57600080fd5b50565b61346b81612ec9565b811461347657600080fd5b50565b61348281612edb565b811461348d57600080fd5b50565b61349981612eed565b81146134a457600080fd5b50565b6134b081612eff565b81146134bb57600080fd5b50565b6134c781612f31565b81146134d257600080fd5b5056fea2646970667358221220725ef5aa65172ebcb12c8d14b751003e6c1b7975d4554285e2738d8d82a2584564736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100e75760003560e01c8063733cfbd41161008a578063a966797511610059578063a966797514610283578063ad893096146102c0578063c0c53b8b146102eb578063f2fde38b14610307576100e7565b8063733cfbd4146101eb5780638456cb59146102165780638da5cb5b1461022d578063a658e13414610258576100e7565b80633f4ba83a116100c65780633f4ba83a146101695780635c975abb146101805780636382d9ad146101ab578063715018a6146101d4576100e7565b8062c36211146100ec5780632b83cccd14610117578063363bf96414610140575b600080fd5b3480156100f857600080fd5b50610101610330565b60405161010e9190612aaa565b60405180910390f35b34801561012357600080fd5b5061013e60048036038101906101399190612470565b610356565b005b34801561014c57600080fd5b50610167600480360381019061016291906124e8565b6108dd565b005b34801561017557600080fd5b5061017e610bd3565b005b34801561018c57600080fd5b50610195610bed565b6040516101a29190612a8f565b60405180910390f35b3480156101b757600080fd5b506101d260048036038101906101cd9190612434565b610c04565b005b3480156101e057600080fd5b506101e9610dd3565b005b3480156101f757600080fd5b50610200610de7565b60405161020d9190612ac5565b60405180910390f35b34801561022257600080fd5b5061022b610e0d565b005b34801561023957600080fd5b50610242610e27565b60405161024f91906129f2565b60405180910390f35b34801561026457600080fd5b5061026d610e51565b60405161027a9190612ae0565b60405180910390f35b34801561028f57600080fd5b506102aa60048036038101906102a59190612589565b610e77565b6040516102b79190612db3565b60405180910390f35b3480156102cc57600080fd5b506102d56115e2565b6040516102e29190612afb565b60405180910390f35b610305600480360381019061030091906124e8565b611608565b005b34801561031357600080fd5b5061032e600480360381019061032991906123e2565b611a42565b005b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61035e611ac6565b610366611b10565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ed90612cb3565b60405180910390fd5b60018114806104055750600281145b610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b90612c93565b60405180910390fd5b8160ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104a091906129f2565b60206040518083038186803b1580156104b857600080fd5b505afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f091906125b2565b1015610531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052890612c33565b60405180910390fd5b600060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b815260040161058e9190612db3565b602060405180830381600087803b1580156105a857600080fd5b505af11580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e091906125b2565b905060008111610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90612bb3565b60405180910390fd5b8060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161068191906129f2565b60206040518083038186803b15801561069957600080fd5b505afa1580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d191906125b2565b1015610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990612cf3565b60405180910390fd5b600182141561076d57610768848260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b609092919063ffffffff16565b6108cf565b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016107ec929190612a36565b602060405180830381600087803b15801561080657600080fd5b505af115801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e91906124bf565b5060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ee4090885836040518363ffffffff1660e01b815260040161089c929190612a36565b600060405180830381600087803b1580156108b657600080fd5b505af11580156108ca573d6000803e3d6000fd5b505050505b506108d8611be6565b505050565b6108e5611bef565b8173ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190612560565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109bf57600080fd5b505afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f7919061240b565b73ffffffffffffffffffffffffffffffffffffffff1614610a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4490612bf3565b60405180910390fd5b8160ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e919061240b565b60cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b610bdb611c6d565b610be3611bef565b610beb611cb6565b565b6000609760009054906101000a900460ff16905090565b610c0c611bef565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ca8573073ffffffffffffffffffffffffffffffffffffffff163190508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ca2573d6000803e3d6000fd5b50610d5f565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ce191906129f2565b60206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3191906125b2565b9050610d5e82828573ffffffffffffffffffffffffffffffffffffffff16611b609092919063ffffffff16565b5b6000811115610dce578273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f46250b0a744e514bfdb95561a293ae5220bba28e3ef598ba6772e909fefd7cc783604051610dc59190612db3565b60405180910390a35b505050565b610ddb611bef565b610de56000611d19565b565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e15611ac6565b610e1d611bef565b610e25611ddf565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610e81611ac6565b610e89611b10565b60003390508260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b8152600401610eec929190612a0d565b60206040518083038186803b158015610f0457600080fd5b505afa158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c91906125b2565b1015610f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7490612c73565b60405180910390fd5b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b460af948430846040518463ffffffff1660e01b8152600401610fdc93929190612df7565b602060405180830381600087803b158015610ff657600080fd5b505af115801561100a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102e91906125b2565b508260cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161108b91906129f2565b60206040518083038186803b1580156110a357600080fd5b505afa1580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db91906125b2565b101561111c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111390612cd3565b60405180910390fd5b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b815260040161119b929190612a36565b602060405180830381600087803b1580156111b557600080fd5b505af11580156111c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ed91906124bf565b5060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25846040518263ffffffff1660e01b81526004016112499190612db3565b602060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b91906125b2565b9150600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b723b34e84846040518363ffffffff1660e01b81526004016112fc929190612dce565b602060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e91906125b2565b90506000811415611394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138b90612d53565b60405180910390fd5b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156113fe57600080fd5b505afa158015611412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114369190612537565b90506000600167ffffffffffffffff81111561147b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156114a95781602001602082028036833780820191505090505b50905060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110611509577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166333e4212982866040518363ffffffff1660e01b815260040161157e929190612a5f565b602060405180830381600087803b15801561159857600080fd5b505af11580156115ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d091906125b2565b50505050506115dd611be6565b919050565b60cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156116395750600160008054906101000a900460ff1660ff16105b80611666575061164830611e42565b1580156116655750600160008054906101000a900460ff1660ff16145b5b6116a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169c90612c13565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156116e2576001600060016101000a81548160ff0219169083151502179055505b6116ea611e65565b6116f2611ebe565b6116fa611f17565b8273ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561174057600080fd5b505afa158015611754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117789190612560565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117d457600080fd5b505afa1580156117e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180c919061240b565b73ffffffffffffffffffffffffffffffffffffffff1614611862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185990612bf3565b60405180910390fd5b8260ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196b57600080fd5b505afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a3919061240b565b60cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015611a3c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611a339190612b16565b60405180910390a15b50505050565b611a4a611bef565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab190612b73565b60405180910390fd5b611ac381611d19565b50565b611ace610bed565b15611b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0590612bd3565b60405180910390fd5b565b60026001541415611b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4d90612d93565b60405180910390fd5b6002600181905550565b611be18363a9059cbb60e01b8484604051602401611b7f929190612a36565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f70565b505050565b60018081905550565b611bf7612038565b73ffffffffffffffffffffffffffffffffffffffff16611c15610e27565b73ffffffffffffffffffffffffffffffffffffffff1614611c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6290612c53565b60405180910390fd5b565b611c75610bed565b611cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cab90612b53565b60405180910390fd5b565b611cbe611c6d565b6000609760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d02612038565b604051611d0f91906129f2565b60405180910390a1565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611de7611ac6565b6001609760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e2b612038565b604051611e3891906129f2565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab90612d33565b60405180910390fd5b611ebc612040565b565b600060019054906101000a900460ff16611f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0490612d33565b60405180910390fd5b611f156120a1565b565b600060019054906101000a900460ff16611f66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5d90612d33565b60405180910390fd5b611f6e6120f9565b565b6000611fd2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166121659092919063ffffffff16565b9050600081511480611ff4575080806020019051810190611ff391906124bf565b5b612033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202a90612d73565b60405180910390fd5b505050565b600033905090565b600060019054906101000a900460ff1661208f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208690612d33565b60405180910390fd5b61209f61209a612038565b611d19565b565b600060019054906101000a900460ff166120f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e790612d33565b60405180910390fd5b60018081905550565b600060019054906101000a900460ff16612148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213f90612d33565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b6060612174848460008561217d565b90509392505050565b6060824710156121c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b990612b93565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516121eb91906129db565b60006040518083038185875af1925050503d8060008114612228576040519150601f19603f3d011682016040523d82523d6000602084013e61222d565b606091505b509150915061223e8783838761224a565b92505050949350505050565b606083156122ad576000835114156122a55761226585611e42565b6122a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229b90612d13565b60405180910390fd5b5b8290506122b8565b6122b783836122c0565b5b949350505050565b6000825111156122d35781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123079190612b31565b60405180910390fd5b60008135905061231f8161341d565b92915050565b6000815190506123348161341d565b92915050565b60008151905061234981613434565b92915050565b60008135905061235e8161344b565b92915050565b60008151905061237381613462565b92915050565b60008135905061238881613479565b92915050565b60008135905061239d81613490565b92915050565b6000815190506123b2816134a7565b92915050565b6000813590506123c7816134be565b92915050565b6000815190506123dc816134be565b92915050565b6000602082840312156123f457600080fd5b600061240284828501612310565b91505092915050565b60006020828403121561241d57600080fd5b600061242b84828501612325565b91505092915050565b6000806040838503121561244757600080fd5b600061245585828601612310565b925050602061246685828601612310565b9150509250929050565b60008060006060848603121561248557600080fd5b600061249386828701612310565b93505060206124a4868287016123b8565b92505060406124b5868287016123b8565b9150509250925092565b6000602082840312156124d157600080fd5b60006124df8482850161233a565b91505092915050565b6000806000606084860312156124fd57600080fd5b600061250b8682870161234f565b935050602061251c8682870161238e565b925050604061252d86828701612379565b9150509250925092565b60006020828403121561254957600080fd5b600061255784828501612364565b91505092915050565b60006020828403121561257257600080fd5b6000612580848285016123a3565b91505092915050565b60006020828403121561259b57600080fd5b60006125a9848285016123b8565b91505092915050565b6000602082840312156125c457600080fd5b60006125d2848285016123cd565b91505092915050565b60006125e783836125f3565b60208301905092915050565b6125fc81612e99565b82525050565b61260b81612e99565b82525050565b600061261c82612e3e565b6126268185612e6c565b935061263183612e2e565b8060005b8381101561266257815161264988826125db565b975061265483612e5f565b925050600181019050612635565b5085935050505092915050565b61267881612eab565b82525050565b600061268982612e49565b6126938185612e7d565b93506126a3818560208601612fea565b80840191505092915050565b6126b881612f48565b82525050565b6126c781612f6c565b82525050565b6126d681612f90565b82525050565b6126e581612fb4565b82525050565b6126f481612fd8565b82525050565b600061270582612e54565b61270f8185612e88565b935061271f818560208601612fea565b6127288161301d565b840191505092915050565b6000612740601483612e88565b915061274b8261302e565b602082019050919050565b6000612763602683612e88565b915061276e82613057565b604082019050919050565b6000612786602683612e88565b9150612791826130a6565b604082019050919050565b60006127a9601083612e88565b91506127b4826130f5565b602082019050919050565b60006127cc601083612e88565b91506127d78261311e565b602082019050919050565b60006127ef603283612e88565b91506127fa82613147565b604082019050919050565b6000612812602e83612e88565b915061281d82613196565b604082019050919050565b6000612835600c83612e88565b9150612840826131e5565b602082019050919050565b6000612858602083612e88565b91506128638261320e565b602082019050919050565b600061287b600a83612e88565b915061288682613237565b602082019050919050565b600061289e600d83612e88565b91506128a982613260565b602082019050919050565b60006128c1600783612e88565b91506128cc82613289565b602082019050919050565b60006128e4600783612e88565b91506128ef826132b2565b602082019050919050565b6000612907600a83612e88565b9150612912826132db565b602082019050919050565b600061292a601d83612e88565b915061293582613304565b602082019050919050565b600061294d602b83612e88565b91506129588261332d565b604082019050919050565b6000612970600583612e88565b915061297b8261337c565b602082019050919050565b6000612993602a83612e88565b915061299e826133a5565b604082019050919050565b60006129b6601f83612e88565b91506129c1826133f4565b602082019050919050565b6129d581612f31565b82525050565b60006129e7828461267e565b915081905092915050565b6000602082019050612a076000830184612602565b92915050565b6000604082019050612a226000830185612602565b612a2f6020830184612602565b9392505050565b6000604082019050612a4b6000830185612602565b612a5860208301846129cc565b9392505050565b60006040820190508181036000830152612a798185612611565b9050612a886020830184612602565b9392505050565b6000602082019050612aa4600083018461266f565b92915050565b6000602082019050612abf60008301846126af565b92915050565b6000602082019050612ada60008301846126be565b92915050565b6000602082019050612af560008301846126cd565b92915050565b6000602082019050612b1060008301846126dc565b92915050565b6000602082019050612b2b60008301846126eb565b92915050565b60006020820190508181036000830152612b4b81846126fa565b905092915050565b60006020820190508181036000830152612b6c81612733565b9050919050565b60006020820190508181036000830152612b8c81612756565b9050919050565b60006020820190508181036000830152612bac81612779565b9050919050565b60006020820190508181036000830152612bcc8161279c565b9050919050565b60006020820190508181036000830152612bec816127bf565b9050919050565b60006020820190508181036000830152612c0c816127e2565b9050919050565b60006020820190508181036000830152612c2c81612805565b9050919050565b60006020820190508181036000830152612c4c81612828565b9050919050565b60006020820190508181036000830152612c6c8161284b565b9050919050565b60006020820190508181036000830152612c8c8161286e565b9050919050565b60006020820190508181036000830152612cac81612891565b9050919050565b60006020820190508181036000830152612ccc816128b4565b9050919050565b60006020820190508181036000830152612cec816128d7565b9050919050565b60006020820190508181036000830152612d0c816128fa565b9050919050565b60006020820190508181036000830152612d2c8161291d565b9050919050565b60006020820190508181036000830152612d4c81612940565b9050919050565b60006020820190508181036000830152612d6c81612963565b9050919050565b60006020820190508181036000830152612d8c81612986565b9050919050565b60006020820190508181036000830152612dac816129a9565b9050919050565b6000602082019050612dc860008301846129cc565b92915050565b6000604082019050612de360008301856129cc565b612df06020830184612602565b9392505050565b6000606082019050612e0c60008301866129cc565b612e196020830185612602565b612e266040830184612602565b949350505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612ea482612f11565b9050919050565b60008115159050919050565b6000612ec282612e99565b9050919050565b6000612ed482612e99565b9050919050565b6000612ee682612e99565b9050919050565b6000612ef882612e99565b9050919050565b6000612f0a82612e99565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612f5382612f5a565b9050919050565b6000612f6582612f11565b9050919050565b6000612f7782612f7e565b9050919050565b6000612f8982612f11565b9050919050565b6000612f9b82612fa2565b9050919050565b6000612fad82612f11565b9050919050565b6000612fbf82612fc6565b9050919050565b6000612fd182612f11565b9050919050565b6000612fe382612f3b565b9050919050565b60005b83811015613008578082015181840152602081019050612fed565b83811115613017576000848401525b50505050565b6000601f19601f8301169050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f21776974686472617742616c616e636500000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f6175726120617373657420617265206e6f742073616d65207769746820636f6d60008201527f706f756e64696e675661756c742077616e740000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f217661756c74416d6f756e740000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f21616c6c6f77616e636500000000000000000000000000000000000000000000600082015250565b7f2177697468647261775479706500000000000000000000000000000000000000600082015250565b7f216d61726b657400000000000000000000000000000000000000000000000000600082015250565b7f2161737365747300000000000000000000000000000000000000000000000000600082015250565b7f216c7042616c616e636500000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f216d696e74000000000000000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61342681612e99565b811461343157600080fd5b50565b61343d81612eab565b811461344857600080fd5b50565b61345481612eb7565b811461345f57600080fd5b50565b61346b81612ec9565b811461347657600080fd5b50565b61348281612edb565b811461348d57600080fd5b50565b61349981612eed565b81146134a457600080fd5b50565b6134b081612eff565b81146134bb57600080fd5b50565b6134c781612f31565b81146134d257600080fd5b5056fea2646970667358221220725ef5aa65172ebcb12c8d14b751003e6c1b7975d4554285e2738d8d82a2584564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeem(address,uint256,uint256)": {
        "params": {
          "withdrawType": "1 for withdraw balancer LP, 2 for restake"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supplyToMarket(uint256)": {
        "details": "caller should approve this contract before calling.      also enables supplied assets as collateral in the market",
        "params": {
          "amount": "of Aura pool tokens to withdraw"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AuraLPMigration: get balanceLP from Aura and supply",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogEmergencyWithdraw(address,address,uint256)": {
        "notice": "emitted when withdraw happens"
      }
    },
    "kind": "user",
    "methods": {
      "auraRewardPool()": {
        "notice": "aura base reward pool"
      },
      "balancerLP()": {
        "notice": "balancer LP token"
      },
      "compoundingVault()": {
        "notice": "auto compounding vault"
      },
      "dropsAuraMarket()": {
        "notice": "drops CToken for aura market"
      },
      "redeem(address,uint256,uint256)": {
        "notice": "market will call this function to withdraw balancer LP or restake to Aura the market should send vault erc20 tokens before call this function"
      },
      "supplyToMarket(uint256)": {
        "notice": "withdraw LP tokens from Aura and supply to market"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 232,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 235,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 535,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 604,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1466,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 104,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 224,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 520,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3342,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "auraRewardPool",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IAuraBaseRewardPool)4333"
      },
      {
        "astId": 3346,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "compoundingVault",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IDropsCompoundingVault)4449"
      },
      {
        "astId": 3350,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "dropsAuraMarket",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IDropsAuraMarket)4420"
      },
      {
        "astId": 3354,
        "contract": "contracts/d6-market-migrations/AuraLPMigration.sol:AuraLPMigration",
        "label": "balancerLP",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IERC20Upgradeable)683"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAuraBaseRewardPool)4333": {
        "encoding": "inplace",
        "label": "contract IAuraBaseRewardPool",
        "numberOfBytes": "20"
      },
      "t_contract(IDropsAuraMarket)4420": {
        "encoding": "inplace",
        "label": "contract IDropsAuraMarket",
        "numberOfBytes": "20"
      },
      "t_contract(IDropsCompoundingVault)4449": {
        "encoding": "inplace",
        "label": "contract IDropsCompoundingVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)683": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}