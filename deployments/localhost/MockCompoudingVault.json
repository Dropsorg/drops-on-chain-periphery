{
  "address": "0x245e77E56b1514D77910c9303e4b44dDb44B788c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d37110e5a26f69731badc9068d5e0ec12765be86cdeed6857ea61d27469027a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x245e77E56b1514D77910c9303e4b44dDb44B788c",
    "transactionIndex": 0,
    "gasUsed": "208786",
    "logsBloom": "0x
    "blockHash": "0x9f165eb254d3956a159dd50e98de55853ae2796b2bd4a16fd64324cd12fa9643",
    "transactionHash": "0x9d37110e5a26f69731badc9068d5e0ec12765be86cdeed6857ea61d27469027a",
    "logs": [],
    "blockNumber": 17536023,
    "cumulativeGasUsed": "208786",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x447786d977Ea11Ad0600E193b2d07A06EfB53e5F"
  ],
  "solcInputHash": "2a79c4162b5952a6aa195452c697c39b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/drops/MockCompoudingVault.sol\":\"MockCompoudingVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"contracts/interfaces/drops/IDropsCompoundingVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\ninterface IDropsCompoundingVault {\\n    function deposit(uint amount) external returns (uint256);\\n\\n    function withdraw(uint amount) external returns (uint256);\\n\\n    function want() external view returns (IERC20Upgradeable);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3430fe6f58e85151282344a080d67ea2f6a3e05f6f2f725abed5c88c5c42597\",\"license\":\"MIT\"},\"contracts/mock/drops/MockCompoudingVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../interfaces/drops/IDropsCompoundingVault.sol';\\n\\ncontract MockCompoudingVault is IDropsCompoundingVault {\\n    address token;\\n\\n    constructor(address _token) {\\n        token = _token;\\n    }\\n\\n    function deposit(uint amount) external override returns (uint256) {}\\n\\n    function withdraw(uint amount) external override returns (uint256) {}\\n\\n    function want() external view override returns (IERC20Upgradeable) {\\n        return IERC20Upgradeable(token);\\n    }\\n\\n    function getPricePerFullShare() external view override returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x6b549400d744d6eef227a8a2c3b56b12351bfa96fc99d4060bfb69429a744ff7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516103643803806103648339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6102568061010e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f1fcd51146100515780632e1a7d4d1461006f57806377c7b8fc1461009f578063b6b55f25146100bd575b600080fd5b6100596100ed565b6040516100669190610185565b60405180910390f35b6100896004803603810190610084919061013e565b610116565b60405161009691906101a0565b60405180910390f35b6100a761011d565b6040516100b491906101a0565b60405180910390f35b6100d760048036038101906100d2919061013e565b610122565b6040516100e491906101a0565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000919050565b600090565b6000919050565b60008135905061013881610209565b92915050565b60006020828403121561015057600080fd5b600061015e84828501610129565b91505092915050565b610170816101e5565b82525050565b61017f816101db565b82525050565b600060208201905061019a6000830184610167565b92915050565b60006020820190506101b56000830184610176565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006101f0826101f7565b9050919050565b6000610202826101bb565b9050919050565b610212816101db565b811461021d57600080fd5b5056fea264697066735822122045240f384093943613c53332ae9018bf092e12982d54a8dc610d637cabede22164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f1fcd51146100515780632e1a7d4d1461006f57806377c7b8fc1461009f578063b6b55f25146100bd575b600080fd5b6100596100ed565b6040516100669190610185565b60405180910390f35b6100896004803603810190610084919061013e565b610116565b60405161009691906101a0565b60405180910390f35b6100a761011d565b6040516100b491906101a0565b60405180910390f35b6100d760048036038101906100d2919061013e565b610122565b6040516100e491906101a0565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000919050565b600090565b6000919050565b60008135905061013881610209565b92915050565b60006020828403121561015057600080fd5b600061015e84828501610129565b91505092915050565b610170816101e5565b82525050565b61017f816101db565b82525050565b600060208201905061019a6000830184610167565b92915050565b60006020820190506101b56000830184610176565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006101f0826101f7565b9050919050565b6000610202826101bb565b9050919050565b610212816101db565b811461021d57600080fd5b5056fea264697066735822122045240f384093943613c53332ae9018bf092e12982d54a8dc610d637cabede22164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6906,
        "contract": "contracts/mock/drops/MockCompoudingVault.sol:MockCompoudingVault",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}