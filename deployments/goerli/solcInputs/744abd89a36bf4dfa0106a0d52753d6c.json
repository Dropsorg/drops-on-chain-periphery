{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/MarketRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ncontract MarketRegistry is Ownable {\n    enum MarketType {\n        TOKEN_POOL,\n        NFT_POOL,\n        OTHER_POOL\n    }\n\n    struct MarketInfo {\n        MarketType marketType;\n        bool registered;\n        uint arrayIndex;\n    }\n\n    /// @notice market address => market info\n    mapping(address => MarketInfo) public marketInfo;\n\n    /// @notice array list of markets\n    address[] public markets;\n\n    /// @notice emitted when new market is added\n    event MarketAdded(address market, MarketType marketType);\n\n    /// @notice emitted when market is removed\n    event MarketRemoved(address market);\n\n    /// @notice emitted when market type is being updated\n    event MarketTypeUpdated(address market, MarketType marketType);\n\n    /// @notice register new market\n    /// @param market address of adding market\n    /// @param marketType type of adding market\n    function addMarket(address market, MarketType marketType) external onlyOwner {\n        require(market != address(0), 'addMarket: Invalid market address');\n\n        MarketInfo memory info = marketInfo[market];\n        require(!info.registered, 'addMarket: Already Registered');\n\n        markets.push(market);\n        marketInfo[market] = MarketInfo(marketType, true, markets.length - 1);\n\n        emit MarketAdded(market, marketType);\n    }\n\n    function _moveTheLastElementToDeletedSpot(uint idx) internal {\n        uint lastElementIdx = markets.length - 1;\n        MarketInfo storage info = marketInfo[markets[lastElementIdx]];\n\n        if (idx < lastElementIdx) {\n            // move the last element to the deleted spot\n            markets[idx] = markets[markets.length - 1];\n\n            // update the idx for the last element's marketInfo\n            info.arrayIndex = idx;\n        }\n\n        markets.pop();\n    }\n\n    /// @notice remove market\n    /// @param market address of removing market\n    function removeMarket(address market) external onlyOwner {\n        require(market != address(0), 'removeMarket: Invalid market address');\n\n        MarketInfo storage info = marketInfo[market];\n        require(info.registered, 'removeMarket: Not Registered');\n\n        delete markets[info.arrayIndex]; // remove market\n        _moveTheLastElementToDeletedSpot(info.arrayIndex);\n\n        info.registered = false;\n        info.arrayIndex = 0;\n\n        emit MarketRemoved(market);\n    }\n\n    /// @notice update market type\n    /// @param market address of updating market\n    /// @param newMarketType new type of updating market\n    function updateMarketType(address market, MarketType newMarketType) external onlyOwner {\n        require(market != address(0), 'updateMarketType: Invalid market address');\n\n        MarketInfo storage info = marketInfo[market];\n        require(info.registered, 'updateMarketType: Not Registered');\n        require(info.marketType != newMarketType, 'updateMarketType: Not new type');\n\n        info.marketType = newMarketType;\n        emit MarketTypeUpdated(market, newMarketType);\n    }\n\n    function getAllMarkets() external view returns (address[] memory) {\n        return markets;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}